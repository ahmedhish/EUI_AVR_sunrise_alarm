
Sunrise_alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  000013d8  0000146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008001a2  008001a2  000015ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003574  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ebb  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019ec  00000000  00000000  00005c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000504  00000000  00000000  00007660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001104  00000000  00000000  00007b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001932  00000000  00000000  00008c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000a59a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <main>
      8a:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <count_time>:
        }
    }

    void count_time()
    {
        ticks++;
      92:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <ticks>
      96:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <ticks+0x1>
      9a:	01 96       	adiw	r24, 0x01	; 1
      9c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <ticks+0x1>
      a0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <ticks>
        if (ticks>61)
      a4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <ticks>
      a8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <ticks+0x1>
      ac:	ce 97       	sbiw	r24, 0x3e	; 62
      ae:	78 f0       	brcs	.+30     	; 0xce <count_time+0x3c>
        {
            seconds++;
      b0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <seconds>
      b4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <seconds+0x1>
      b8:	01 96       	adiw	r24, 0x01	; 1
      ba:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <seconds+0x1>
      be:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <seconds>
            TCNT2=246;
      c2:	86 ef       	ldi	r24, 0xF6	; 246
      c4:	84 bd       	out	0x24, r24	; 36
            ticks =0;
      c6:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <ticks+0x1>
      ca:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <ticks>
        }
        if (seconds>59)
      ce:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <seconds>
      d2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <seconds+0x1>
      d6:	cc 97       	sbiw	r24, 0x3c	; 60
      d8:	68 f0       	brcs	.+26     	; 0xf4 <count_time+0x62>
        {
            minutes++;
      da:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
      de:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__data_end+0x1>
      e2:	01 96       	adiw	r24, 0x01	; 1
      e4:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
      e8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
            seconds=0;
      ec:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <seconds+0x1>
      f0:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <seconds>
      f4:	08 95       	ret

000000f6 <sorting_timers>:
    match_status matching=NO_MATCH;
	
	st_timer0_config_t_ timer0_config;

    void sorting_timers(alarm* INPUT_TIMERS)
    {
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	bc 01       	movw	r22, r24
        alarm temp;

        for(int k=0; k<last_timer; k++)
     108:	c0 e0       	ldi	r28, 0x00	; 0
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	51 c0       	rjmp	.+162    	; 0x1b0 <sorting_timers+0xba>
        {
            for(int l=0; l<last_timer-k; l++)
            {
                if(INPUT_TIMERS[l].minutes_relative<INPUT_TIMERS[l+1].minutes_relative)
     10e:	da 01       	movw	r26, r20
     110:	aa 0f       	add	r26, r26
     112:	bb 1f       	adc	r27, r27
     114:	aa 0f       	add	r26, r26
     116:	bb 1f       	adc	r27, r27
     118:	a6 0f       	add	r26, r22
     11a:	b7 1f       	adc	r27, r23
     11c:	12 96       	adiw	r26, 0x02	; 2
     11e:	8c 91       	ld	r24, X
     120:	12 97       	sbiw	r26, 0x02	; 2
     122:	fa 01       	movw	r30, r20
     124:	31 96       	adiw	r30, 0x01	; 1
     126:	ee 0f       	add	r30, r30
     128:	ff 1f       	adc	r31, r31
     12a:	ee 0f       	add	r30, r30
     12c:	ff 1f       	adc	r31, r31
     12e:	e6 0f       	add	r30, r22
     130:	f7 1f       	adc	r31, r23
     132:	92 81       	ldd	r25, Z+2	; 0x02
     134:	89 17       	cp	r24, r25
     136:	9c f4       	brge	.+38     	; 0x15e <sorting_timers+0x68>
                {
                    temp= INPUT_TIMERS[l];
     138:	0d 91       	ld	r16, X+
     13a:	1d 91       	ld	r17, X+
     13c:	2d 91       	ld	r18, X+
     13e:	3c 91       	ld	r19, X
     140:	13 97       	sbiw	r26, 0x03	; 3
                    INPUT_TIMERS[l]=INPUT_TIMERS[l+1];
     142:	c0 80       	ld	r12, Z
     144:	d1 80       	ldd	r13, Z+1	; 0x01
     146:	e2 80       	ldd	r14, Z+2	; 0x02
     148:	f3 80       	ldd	r15, Z+3	; 0x03
     14a:	cd 92       	st	X+, r12
     14c:	dd 92       	st	X+, r13
     14e:	ed 92       	st	X+, r14
     150:	fc 92       	st	X, r15
     152:	13 97       	sbiw	r26, 0x03	; 3
                    INPUT_TIMERS[l+1]=temp;
     154:	00 83       	st	Z, r16
     156:	11 83       	std	Z+1, r17	; 0x01
     158:	22 83       	std	Z+2, r18	; 0x02
     15a:	33 83       	std	Z+3, r19	; 0x03
     15c:	1a c0       	rjmp	.+52     	; 0x192 <sorting_timers+0x9c>
                }
                else if(INPUT_TIMERS[l].minutes_relative==INPUT_TIMERS[l+1].minutes_relative)
     15e:	89 13       	cpse	r24, r25
     160:	18 c0       	rjmp	.+48     	; 0x192 <sorting_timers+0x9c>
                {
                    if(INPUT_TIMERS[l].seconds_relative<INPUT_TIMERS[l+1].seconds_relative)
     162:	13 96       	adiw	r26, 0x03	; 3
     164:	9c 91       	ld	r25, X
     166:	13 97       	sbiw	r26, 0x03	; 3
     168:	83 81       	ldd	r24, Z+3	; 0x03
     16a:	98 17       	cp	r25, r24
     16c:	94 f4       	brge	.+36     	; 0x192 <sorting_timers+0x9c>
                    {
                        temp= INPUT_TIMERS[l];
     16e:	0d 91       	ld	r16, X+
     170:	1d 91       	ld	r17, X+
     172:	2d 91       	ld	r18, X+
     174:	3c 91       	ld	r19, X
     176:	13 97       	sbiw	r26, 0x03	; 3
                        INPUT_TIMERS[l]=INPUT_TIMERS[l+1];
     178:	c0 80       	ld	r12, Z
     17a:	d1 80       	ldd	r13, Z+1	; 0x01
     17c:	e2 80       	ldd	r14, Z+2	; 0x02
     17e:	f3 80       	ldd	r15, Z+3	; 0x03
     180:	cd 92       	st	X+, r12
     182:	dd 92       	st	X+, r13
     184:	ed 92       	st	X+, r14
     186:	fc 92       	st	X, r15
     188:	13 97       	sbiw	r26, 0x03	; 3
                        INPUT_TIMERS[l+1]=temp;
     18a:	00 83       	st	Z, r16
     18c:	11 83       	std	Z+1, r17	; 0x01
     18e:	22 83       	std	Z+2, r18	; 0x02
     190:	33 83       	std	Z+3, r19	; 0x03
    {
        alarm temp;

        for(int k=0; k<last_timer; k++)
        {
            for(int l=0; l<last_timer-k; l++)
     192:	4f 5f       	subi	r20, 0xFF	; 255
     194:	5f 4f       	sbci	r21, 0xFF	; 255
     196:	02 c0       	rjmp	.+4      	; 0x19c <sorting_timers+0xa6>
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <last_timer>
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	2c 1b       	sub	r18, r28
     1a4:	3d 0b       	sbc	r19, r29
     1a6:	42 17       	cp	r20, r18
     1a8:	53 07       	cpc	r21, r19
     1aa:	0c f4       	brge	.+2      	; 0x1ae <sorting_timers+0xb8>
     1ac:	b0 cf       	rjmp	.-160    	; 0x10e <sorting_timers+0x18>

    void sorting_timers(alarm* INPUT_TIMERS)
    {
        alarm temp;

        for(int k=0; k<last_timer; k++)
     1ae:	21 96       	adiw	r28, 0x01	; 1
     1b0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <last_timer>
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	c8 17       	cp	r28, r24
     1b8:	d9 07       	cpc	r29, r25
     1ba:	74 f3       	brlt	.-36     	; 0x198 <sorting_timers+0xa2>
                        INPUT_TIMERS[l+1]=temp;
                    }
                }
            }
        }
    }
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	08 95       	ret

000001ce <SET>:

    error_status SET(void)
    {
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	28 97       	sbiw	r28, 0x08	; 8
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
        uint8_t array_section[2]= {0};
     1e8:	1a 82       	std	Y+2, r1	; 0x02
     1ea:	19 82       	std	Y+1, r1	; 0x01
        char input_string[6]= {0};
     1ec:	fe 01       	movw	r30, r28
     1ee:	33 96       	adiw	r30, 0x03	; 3
     1f0:	86 e0       	ldi	r24, 0x06	; 6
     1f2:	df 01       	movw	r26, r30
     1f4:	1d 92       	st	X+, r1
     1f6:	8a 95       	dec	r24
     1f8:	e9 f7       	brne	.-6      	; 0x1f4 <SET+0x26>

        input_string[5]='\0';
        if(last_timer>=3)
     1fa:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <last_timer>
     1fe:	83 30       	cpi	r24, 0x03	; 3
     200:	40 f0       	brcs	.+16     	; 0x212 <SET+0x44>
        {
            LCD_Clear();
     202:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_Clear>
            LCD_WriteString("timers full");
     206:	8f e6       	ldi	r24, 0x6F	; 111
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
            return ERROR;
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	a7 c0       	rjmp	.+334    	; 0x360 <SET+0x192>
        }
        uint8_t i=0;
        LCD_Goto(0,0);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("Enter alarm time :");
     21a:	8b e7       	ldi	r24, 0x7B	; 123
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        LCD_Goto(1,7);
     222:	67 e0       	ldi	r22, 0x07	; 7
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("00:00");
     22a:	8e e8       	ldi	r24, 0x8E	; 142
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        LCD_Goto(1,7);
     232:	67 e0       	ldi	r22, 0x07	; 7
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        char Pressed_Key=key;
     23a:	00 91 6e 00 	lds	r16, 0x006E	; 0x80006e <key>
        {
            LCD_Clear();
            LCD_WriteString("timers full");
            return ERROR;
        }
        uint8_t i=0;
     23e:	10 e0       	ldi	r17, 0x00	; 0
        LCD_Goto(1,7);
        LCD_WriteString("00:00");
        LCD_Goto(1,7);
        char Pressed_Key=key;

        while(Pressed_Key != '=')
     240:	1e c0       	rjmp	.+60     	; 0x27e <SET+0xb0>
        {
            
            while(KeyPad_GetValue()!=PRESSED);
     242:	0e 94 49 04 	call	0x892	; 0x892 <KeyPad_GetValue>
     246:	81 11       	cpse	r24, r1
     248:	fc cf       	rjmp	.-8      	; 0x242 <SET+0x74>

			Pressed_Key=key;
     24a:	00 91 6e 00 	lds	r16, 0x006E	; 0x80006e <key>
            input_string[i]=Pressed_Key;
     24e:	e3 e0       	ldi	r30, 0x03	; 3
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ec 0f       	add	r30, r28
     254:	fd 1f       	adc	r31, r29
     256:	e1 0f       	add	r30, r17
     258:	f1 1d       	adc	r31, r1
     25a:	00 83       	st	Z, r16

            LCD_WriteChar(Pressed_Key);
     25c:	80 2f       	mov	r24, r16
     25e:	0e 94 72 05 	call	0xae4	; 0xae4 <LCD_WriteChar>
            i++;
     262:	1f 5f       	subi	r17, 0xFF	; 255
            if(i==2)
     264:	12 30       	cpi	r17, 0x02	; 2
     266:	21 f4       	brne	.+8      	; 0x270 <SET+0xa2>
                LCD_Goto(1,10);
     268:	6a e0       	ldi	r22, 0x0A	; 10
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
            if(i>4)
     270:	15 30       	cpi	r17, 0x05	; 5
     272:	28 f0       	brcs	.+10     	; 0x27e <SET+0xb0>
            {
                i=0;
                LCD_Goto(1,7);
     274:	67 e0       	ldi	r22, 0x07	; 7
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
            i++;
            if(i==2)
                LCD_Goto(1,10);
            if(i>4)
            {
                i=0;
     27c:	10 e0       	ldi	r17, 0x00	; 0
        LCD_Goto(1,7);
        LCD_WriteString("00:00");
        LCD_Goto(1,7);
        char Pressed_Key=key;

        while(Pressed_Key != '=')
     27e:	0d 33       	cpi	r16, 0x3D	; 61
     280:	01 f7       	brne	.-64     	; 0x242 <SET+0x74>
            {
                i=0;
                LCD_Goto(1,7);
            }
        }
        array_section[0]=input_string[0];
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	89 83       	std	Y+1, r24	; 0x01
        array_section[1]=input_string[1];
     286:	8c 81       	ldd	r24, Y+4	; 0x04
     288:	8a 83       	std	Y+2, r24	; 0x02
        if(atoi(array_section)>=0 && atoi(array_section)<60)
     28a:	ce 01       	movw	r24, r28
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	0e 94 c4 09 	call	0x1388	; 0x1388 <atoi>
     292:	99 23       	and	r25, r25
     294:	d4 f0       	brlt	.+52     	; 0x2ca <SET+0xfc>
     296:	8c 33       	cpi	r24, 0x3C	; 60
     298:	91 05       	cpc	r25, r1
     29a:	bc f4       	brge	.+46     	; 0x2ca <SET+0xfc>
            INPUT_TIMERS[last_timer].minutes_user=atoi(array_section);
     29c:	f0 90 b2 01 	lds	r15, 0x01B2	; 0x8001b2 <last_timer>
     2a0:	0f 2d       	mov	r16, r15
     2a2:	10 e0       	ldi	r17, 0x00	; 0
     2a4:	f8 01       	movw	r30, r16
     2a6:	ee 0f       	add	r30, r30
     2a8:	ff 1f       	adc	r31, r31
     2aa:	ee 0f       	add	r30, r30
     2ac:	ff 1f       	adc	r31, r31
     2ae:	ee 59       	subi	r30, 0x9E	; 158
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	81 83       	std	Z+1, r24	; 0x01
        {
            LCD_Goto(3,0);
            LCD_WriteString("invalid");
            return ERROR;
        }
        array_section[0]=input_string[2];
     2b4:	8d 81       	ldd	r24, Y+5	; 0x05
     2b6:	89 83       	std	Y+1, r24	; 0x01
        array_section[1]=input_string[3];
     2b8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ba:	8a 83       	std	Y+2, r24	; 0x02

        if(atoi(array_section)>=0 && atoi(array_section)<60)
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	0e 94 c4 09 	call	0x1388	; 0x1388 <atoi>
     2c4:	99 23       	and	r25, r25
     2c6:	5c f4       	brge	.+22     	; 0x2de <SET+0x110>
     2c8:	25 c0       	rjmp	.+74     	; 0x314 <SET+0x146>
        array_section[1]=input_string[1];
        if(atoi(array_section)>=0 && atoi(array_section)<60)
            INPUT_TIMERS[last_timer].minutes_user=atoi(array_section);
        else
        {
            LCD_Goto(3,0);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
            LCD_WriteString("invalid");
     2d2:	84 e9       	ldi	r24, 0x94	; 148
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
            return ERROR;
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	41 c0       	rjmp	.+130    	; 0x360 <SET+0x192>
        }
        array_section[0]=input_string[2];
        array_section[1]=input_string[3];

        if(atoi(array_section)>=0 && atoi(array_section)<60)
     2de:	8c 33       	cpi	r24, 0x3C	; 60
     2e0:	91 05       	cpc	r25, r1
     2e2:	c4 f4       	brge	.+48     	; 0x314 <SET+0x146>
        {
            INPUT_TIMERS[last_timer].seconds_user=atoi(array_section);
     2e4:	f8 01       	movw	r30, r16
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	ee 59       	subi	r30, 0x9E	; 158
     2f0:	ff 4f       	sbci	r31, 0xFF	; 255
     2f2:	80 83       	st	Z, r24
        {
            LCD_Goto(3,0);
            LCD_WriteString("invalid");
            return ERROR;
        }
        INPUT_TIMERS[last_timer].minutes_relative= minutes + INPUT_TIMERS[last_timer].minutes_user;
     2f4:	91 81       	ldd	r25, Z+1	; 0x01
     2f6:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__data_end>
     2fa:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__data_end+0x1>
     2fe:	29 0f       	add	r18, r25
     300:	22 83       	std	Z+2, r18	; 0x02
        INPUT_TIMERS[last_timer].seconds_relative= seconds + INPUT_TIMERS[last_timer].seconds_user;
     302:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <seconds>
     306:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <seconds+0x1>
     30a:	82 0f       	add	r24, r18
     30c:	83 83       	std	Z+3, r24	; 0x03
		if(INPUT_TIMERS[last_timer].seconds_relative >60)
     30e:	8d 33       	cpi	r24, 0x3D	; 61
     310:	5c f4       	brge	.+22     	; 0x328 <SET+0x15a>
     312:	16 c0       	rjmp	.+44     	; 0x340 <SET+0x172>
        {
            INPUT_TIMERS[last_timer].seconds_user=atoi(array_section);
        }
        else
        {
            LCD_Goto(3,0);
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
            LCD_WriteString("invalid");
     31c:	84 e9       	ldi	r24, 0x94	; 148
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
            return ERROR;
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	1c c0       	rjmp	.+56     	; 0x360 <SET+0x192>
        }
        INPUT_TIMERS[last_timer].minutes_relative= minutes + INPUT_TIMERS[last_timer].minutes_user;
        INPUT_TIMERS[last_timer].seconds_relative= seconds + INPUT_TIMERS[last_timer].seconds_user;
		if(INPUT_TIMERS[last_timer].seconds_relative >60)
			{
				INPUT_TIMERS[last_timer].seconds_relative-=60;
     328:	f8 01       	movw	r30, r16
     32a:	ee 0f       	add	r30, r30
     32c:	ff 1f       	adc	r31, r31
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	ee 59       	subi	r30, 0x9E	; 158
     334:	ff 4f       	sbci	r31, 0xFF	; 255
     336:	8c 53       	subi	r24, 0x3C	; 60
     338:	83 83       	std	Z+3, r24	; 0x03
				INPUT_TIMERS[last_timer].minutes_relative++;
     33a:	82 81       	ldd	r24, Z+2	; 0x02
     33c:	8f 5f       	subi	r24, 0xFF	; 255
     33e:	82 83       	std	Z+2, r24	; 0x02
			}
        last_timer++;
     340:	f3 94       	inc	r15
     342:	f0 92 b2 01 	sts	0x01B2, r15	; 0x8001b2 <last_timer>
        LCD_Goto(3,0);
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("success");
     34e:	8c e9       	ldi	r24, 0x9C	; 156
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        sorting_timers(INPUT_TIMERS);
     356:	82 e6       	ldi	r24, 0x62	; 98
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 7b 00 	call	0xf6	; 0xf6 <sorting_timers>

        return NO_ERROR;
     35e:	81 e0       	ldi	r24, 0x01	; 1
    }
     360:	28 96       	adiw	r28, 0x08	; 8
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	08 95       	ret

00000378 <cancel_timer>:


    error_status cancel_timer(uint8_t Timer_num)
    {
        if(Timer_num>3||Timer_num<=0)
     378:	9f ef       	ldi	r25, 0xFF	; 255
     37a:	98 0f       	add	r25, r24
     37c:	93 30       	cpi	r25, 0x03	; 3
     37e:	c8 f4       	brcc	.+50     	; 0x3b2 <cancel_timer+0x3a>
        {
            return Timer_Not_found;
        }
        else
        {
            INPUT_TIMERS[Timer_num-1].minutes_user=-1;
     380:	e8 2f       	mov	r30, r24
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	31 97       	sbiw	r30, 0x01	; 1
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	ee 59       	subi	r30, 0x9E	; 158
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	81 83       	std	Z+1, r24	; 0x01
            INPUT_TIMERS[Timer_num-1].seconds_user=-1;
     396:	80 83       	st	Z, r24
            INPUT_TIMERS[Timer_num-1].seconds_relative=-1;
     398:	83 83       	std	Z+3, r24	; 0x03
            INPUT_TIMERS[Timer_num-1].minutes_relative=-1;
     39a:	82 83       	std	Z+2, r24	; 0x02
            sorting_timers(INPUT_TIMERS);
     39c:	82 e6       	ldi	r24, 0x62	; 98
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 7b 00 	call	0xf6	; 0xf6 <sorting_timers>

            last_timer--;
     3a4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <last_timer>
     3a8:	81 50       	subi	r24, 0x01	; 1
     3aa:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <last_timer>
            return Time_deleted_successfully;
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	08 95       	ret

    error_status cancel_timer(uint8_t Timer_num)
    {
        if(Timer_num>3||Timer_num<=0)
        {
            return Timer_Not_found;
     3b2:	83 e0       	ldi	r24, 0x03	; 3

            last_timer--;
            return Time_deleted_successfully;

        }
    }
     3b4:	08 95       	ret

000003b6 <LDR_check>:


    u8 LDR_check(void)
    {

        ADC_ReadChannel(CHANNEL0);
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <ADC_ReadChannel>
        LCD_Goto(3,0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteNumber(Adc_Data);
     3c4:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <Adc_Data>
     3c8:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <Adc_Data+0x1>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_WriteNumber>
        if (Adc_Data > 50)
     3d4:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <Adc_Data>
     3d8:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <Adc_Data+0x1>
     3dc:	c3 97       	sbiw	r24, 0x33	; 51
     3de:	10 f0       	brcs	.+4      	; 0x3e4 <LDR_check+0x2e>
        {
            return 1;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	08 95       	ret
        }
        else
        {
            return 0;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
     3e6:	08 95       	ret

000003e8 <Waking_sequence_Init>:

    error_status Waking_sequence_Init(void)
    {
     3e8:	cf 93       	push	r28
        
        u8 buzzer_time_sec = 7;
        u8 ldr_time_sec = 7;

        LCD_Clear();
     3ea:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_Clear>
        LCD_Goto(0, 0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("     ALARM TIME     ");
     3f6:	84 ea       	ldi	r24, 0xA4	; 164
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>

        /*LED Brightening */
        LCD_Goto(2, 0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("Light brightening...");
     406:	89 eb       	ldi	r24, 0xB9	; 185
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        /*Configuring the timer*/
        

        for (u8 i = 2; i < 253; ++i)
     40e:	c2 e0       	ldi	r28, 0x02	; 2
     410:	10 c0       	rjmp	.+32     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
        {
            if (!LDR_check())
     412:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LDR_check>
     416:	81 11       	cpse	r24, r1
     418:	05 c0       	rjmp	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
            {
                TIMER0_set_compare(i);
     41a:	8c 2f       	mov	r24, r28
     41c:	0e 94 3c 09 	call	0x1278	; 0x1278 <TIMER0_set_compare>
        LCD_Goto(2, 0);
        LCD_WriteString("Light brightening...");
        /*Configuring the timer*/
        

        for (u8 i = 2; i < 253; ++i)
     420:	cf 5f       	subi	r28, 0xFF	; 255
     422:	07 c0       	rjmp	.+14     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
                TIMER0_set_compare(i);

            }
            else
            {
                LCD_Clear();
     424:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_Clear>
                LCD_WriteString("    Good Morning     ");
     428:	8e ec       	ldi	r24, 0xCE	; 206
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>

                return;
     430:	66 c0       	rjmp	.+204    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
        LCD_Goto(2, 0);
        LCD_WriteString("Light brightening...");
        /*Configuring the timer*/
        

        for (u8 i = 2; i < 253; ++i)
     432:	cd 3f       	cpi	r28, 0xFD	; 253
     434:	70 f3       	brcs	.-36     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
                return;
            }
        }


        LCD_Goto(2, 0);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("                    ");
     43e:	84 ee       	ldi	r24, 0xE4	; 228
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        LCD_Goto(2, 0);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("Buzzer will turn on in ");
     44e:	89 ef       	ldi	r24, 0xF9	; 249
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>

        /*Check exact name */
        buzzer_time_sec += seconds;
     456:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <seconds>
     45a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <seconds+0x1>
     45e:	c7 e0       	ldi	r28, 0x07	; 7
     460:	c8 0f       	add	r28, r24
        while (buzzer_time_sec < seconds)
     462:	15 c0       	rjmp	.+42     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
        {
            LCD_WriteNumber(buzzer_time_sec-seconds);
     464:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <seconds>
     468:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <seconds+0x1>
     46c:	68 1b       	sub	r22, r24
     46e:	79 0b       	sbc	r23, r25
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_WriteNumber>
            if (LDR_check())
     478:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LDR_check>
     47c:	88 23       	and	r24, r24
     47e:	39 f0       	breq	.+14     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
            {
                LCD_Clear();
     480:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_Clear>
                LCD_WriteString("    Good Morning     ");
     484:	8e ec       	ldi	r24, 0xCE	; 206
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>

                return;
     48c:	38 c0       	rjmp	.+112    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
        LCD_Goto(2, 0);
        LCD_WriteString("Buzzer will turn on in ");

        /*Check exact name */
        buzzer_time_sec += seconds;
        while (buzzer_time_sec < seconds)
     48e:	6c 2f       	mov	r22, r28
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <seconds>
     496:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <seconds+0x1>
     49a:	68 17       	cp	r22, r24
     49c:	79 07       	cpc	r23, r25
     49e:	10 f3       	brcs	.-60     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
                LCD_WriteString("    Good Morning     ");

                return;
            }
        }
        LCD_Goto(2, 0);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("                    ");
     4a8:	84 ee       	ldi	r24, 0xE4	; 228
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        LCD_Goto(2, 0);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("      Buzzer On     ");
     4b8:	81 e1       	ldi	r24, 0x11	; 17
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        BUZZER_TurnOn(BUZZER1);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <BUZZER_TurnOn>

        while (!LDR_check());
     4c6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LDR_check>
     4ca:	88 23       	and	r24, r24
     4cc:	e1 f3       	breq	.-8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
        ldr_time_sec+=seconds;
     4ce:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <seconds>
     4d2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <seconds+0x1>
     4d6:	47 e0       	ldi	r20, 0x07	; 7
     4d8:	48 0f       	add	r20, r24
        while (ldr_time_sec<seconds);
     4da:	84 2f       	mov	r24, r20
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <seconds>
     4e2:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <seconds+0x1>
     4e6:	82 17       	cp	r24, r18
     4e8:	93 07       	cpc	r25, r19
     4ea:	b8 f3       	brcs	.-18     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>


        BUZZER_TurnOff(BUZZER1);
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	0e 94 01 04 	call	0x802	; 0x802 <BUZZER_TurnOff>
        LCD_Clear();
     4f2:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_Clear>
        LCD_WriteString("    Good Morning     ");
     4f6:	8e ec       	ldi	r24, 0xCE	; 206
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        matching==NO_MATCH;

        return;
    }
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <MATCH>:
    {
        u8 minutes_matchflag=0;
        u8 seconds_matchflag=0;
        u8 index_matching;

        for (u8 array =0; array < 3 ; array++)
     502:	80 e0       	ldi	r24, 0x00	; 0
        return;
    }

    void MATCH(void)
    {
        u8 minutes_matchflag=0;
     504:	90 e0       	ldi	r25, 0x00	; 0
        u8 seconds_matchflag=0;
        u8 index_matching;

        for (u8 array =0; array < 3 ; array++)
     506:	2a c0       	rjmp	.+84     	; 0x55c <MATCH+0x5a>
        {
            if (INPUT_TIMERS[array].minutes_relative==minutes)
     508:	48 2f       	mov	r20, r24
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	fa 01       	movw	r30, r20
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	ee 0f       	add	r30, r30
     514:	ff 1f       	adc	r31, r31
     516:	ee 59       	subi	r30, 0x9E	; 158
     518:	ff 4f       	sbci	r31, 0xFF	; 255
     51a:	22 81       	ldd	r18, Z+2	; 0x02
     51c:	02 2e       	mov	r0, r18
     51e:	00 0c       	add	r0, r0
     520:	33 0b       	sbc	r19, r19
     522:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <__data_end>
     526:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <__data_end+0x1>
     52a:	26 17       	cp	r18, r22
     52c:	37 07       	cpc	r19, r23
     52e:	a1 f4       	brne	.+40     	; 0x558 <MATCH+0x56>
            {
                minutes_matchflag =1;
                if (INPUT_TIMERS[array].seconds_relative==seconds)
     530:	44 0f       	add	r20, r20
     532:	55 1f       	adc	r21, r21
     534:	44 0f       	add	r20, r20
     536:	55 1f       	adc	r21, r21
     538:	fa 01       	movw	r30, r20
     53a:	ee 59       	subi	r30, 0x9E	; 158
     53c:	ff 4f       	sbci	r31, 0xFF	; 255
     53e:	23 81       	ldd	r18, Z+3	; 0x03
     540:	02 2e       	mov	r0, r18
     542:	00 0c       	add	r0, r0
     544:	33 0b       	sbc	r19, r19
     546:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <seconds>
     54a:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <seconds+0x1>
     54e:	24 17       	cp	r18, r20
     550:	35 07       	cpc	r19, r21
     552:	41 f0       	breq	.+16     	; 0x564 <MATCH+0x62>

        for (u8 array =0; array < 3 ; array++)
        {
            if (INPUT_TIMERS[array].minutes_relative==minutes)
            {
                minutes_matchflag =1;
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	01 c0       	rjmp	.+2      	; 0x55a <MATCH+0x58>
                    seconds_matchflag=0;
                }
            }
            else
            {
                minutes_matchflag=0;
     558:	90 e0       	ldi	r25, 0x00	; 0
    {
        u8 minutes_matchflag=0;
        u8 seconds_matchflag=0;
        u8 index_matching;

        for (u8 array =0; array < 3 ; array++)
     55a:	8f 5f       	subi	r24, 0xFF	; 255
     55c:	83 30       	cpi	r24, 0x03	; 3
     55e:	a0 f2       	brcs	.-88     	; 0x508 <MATCH+0x6>
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	02 c0       	rjmp	.+4      	; 0x568 <MATCH+0x66>
            if (INPUT_TIMERS[array].minutes_relative==minutes)
            {
                minutes_matchflag =1;
                if (INPUT_TIMERS[array].seconds_relative==seconds)
                {
                    seconds_matchflag=1;
     564:	81 e0       	ldi	r24, 0x01	; 1

        for (u8 array =0; array < 3 ; array++)
        {
            if (INPUT_TIMERS[array].minutes_relative==minutes)
            {
                minutes_matchflag =1;
     566:	91 e0       	ldi	r25, 0x01	; 1
            {
                minutes_matchflag=0;
            }
        }

        if (minutes_matchflag ==1 && seconds_matchflag ==1 )
     568:	91 30       	cpi	r25, 0x01	; 1
     56a:	41 f4       	brne	.+16     	; 0x57c <MATCH+0x7a>
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	31 f4       	brne	.+12     	; 0x57c <MATCH+0x7a>
        {
            cancel_timer(index_matching+1);
     570:	0e 94 bc 01 	call	0x378	; 0x378 <cancel_timer>
            matching = MATCHED;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     57a:	08 95       	ret
        }
        else
        {
            matching = NO_MATCH;
     57c:	85 e0       	ldi	r24, 0x05	; 5
     57e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     582:	08 95       	ret

00000584 <Display_menu>:
        }
    }

    void Display_menu(void)
    {
        LCD_Clear();
     584:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_Clear>
        LCD_Goto (0,0);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("   Sunrise Alarm    ");
     590:	86 e2       	ldi	r24, 0x26	; 38
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        LCD_Goto(1,0);
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString(" + : Set Alarm");
     5a0:	8b e3       	ldi	r24, 0x3B	; 59
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        LCD_Goto(2,0);
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString(" - : Cancel Alarm");
     5b0:	8a e4       	ldi	r24, 0x4A	; 74
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        LCD_Goto(3,0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString(" * : Show Alarms ");
     5c0:	8c e5       	ldi	r24, 0x5C	; 92
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        LCD_Goto(3,19);
     5c8:	63 e1       	ldi	r22, 0x13	; 19
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
     5d0:	08 95       	ret

000005d2 <Timers_Display>:
    }

    error_status Timers_Display(void)
    {
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
        LCD_Clear();
     5dc:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_Clear>
        LCD_WriteString("The running timers:");
     5e0:	8e e6       	ldi	r24, 0x6E	; 110
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        char buffer[2]= {0};
        for(int i=0; i<last_timer; i++)
     5e8:	c0 e0       	ldi	r28, 0x00	; 0
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
     5ec:	31 c0       	rjmp	.+98     	; 0x650 <Timers_Display+0x7e>
        {
            LCD_Goto(i+1,0);
     5ee:	fc 2e       	mov	r15, r28
     5f0:	f3 94       	inc	r15
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	8f 2d       	mov	r24, r15
     5f6:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
            LCD_WriteNumber(i+1);
     5fa:	8e 01       	movw	r16, r28
     5fc:	0f 5f       	subi	r16, 0xFF	; 255
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
     600:	b8 01       	movw	r22, r16
     602:	01 2e       	mov	r0, r17
     604:	00 0c       	add	r0, r0
     606:	88 0b       	sbc	r24, r24
     608:	99 0b       	sbc	r25, r25
     60a:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_WriteNumber>
            LCD_WriteChar('-');
     60e:	8d e2       	ldi	r24, 0x2D	; 45
     610:	0e 94 72 05 	call	0xae4	; 0xae4 <LCD_WriteChar>
            LCD_Goto(i+1,3);
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	8f 2d       	mov	r24, r15
     618:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
            LCD_WriteNumber(INPUT_TIMERS[i].minutes_relative);
     61c:	cc 0f       	add	r28, r28
     61e:	dd 1f       	adc	r29, r29
     620:	cc 0f       	add	r28, r28
     622:	dd 1f       	adc	r29, r29
     624:	ce 59       	subi	r28, 0x9E	; 158
     626:	df 4f       	sbci	r29, 0xFF	; 255
     628:	6a 81       	ldd	r22, Y+2	; 0x02
     62a:	06 2e       	mov	r0, r22
     62c:	00 0c       	add	r0, r0
     62e:	77 0b       	sbc	r23, r23
     630:	88 0b       	sbc	r24, r24
     632:	99 0b       	sbc	r25, r25
     634:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_WriteNumber>
            LCD_WriteChar(':');
     638:	8a e3       	ldi	r24, 0x3A	; 58
     63a:	0e 94 72 05 	call	0xae4	; 0xae4 <LCD_WriteChar>
            LCD_WriteNumber(INPUT_TIMERS[i].seconds_relative);
     63e:	6b 81       	ldd	r22, Y+3	; 0x03
     640:	06 2e       	mov	r0, r22
     642:	00 0c       	add	r0, r0
     644:	77 0b       	sbc	r23, r23
     646:	88 0b       	sbc	r24, r24
     648:	99 0b       	sbc	r25, r25
     64a:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_WriteNumber>
    error_status Timers_Display(void)
    {
        LCD_Clear();
        LCD_WriteString("The running timers:");
        char buffer[2]= {0};
        for(int i=0; i<last_timer; i++)
     64e:	e8 01       	movw	r28, r16
     650:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <last_timer>
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	c8 17       	cp	r28, r24
     658:	d9 07       	cpc	r29, r25
     65a:	4c f2       	brlt	.-110    	; 0x5ee <Timers_Display+0x1c>
            LCD_WriteNumber(INPUT_TIMERS[i].minutes_relative);
            LCD_WriteChar(':');
            LCD_WriteNumber(INPUT_TIMERS[i].seconds_relative);

        }
        LCD_Goto(3,14);
     65c:	6e e0       	ldi	r22, 0x0E	; 14
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Goto>
        LCD_WriteString("0:Back");
     664:	82 e8       	ldi	r24, 0x82	; 130
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LCD_WriteString>
        clear_flag=0;
     66c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <clear_flag>
    }
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	08 95       	ret

0000067c <runnable>:


    void runnable(void)
    {
        if(clear_flag ==1)
     67c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <clear_flag>
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	a1 f4       	brne	.+40     	; 0x6ac <runnable+0x30>
        {
            Display_menu(); 
     684:	0e 94 c2 02 	call	0x584	; 0x584 <Display_menu>
            do
            {
                MATCH();
     688:	0e 94 81 02 	call	0x502	; 0x502 <MATCH>
                if (matching==MATCHED)
     68c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	11 f4       	brne	.+4      	; 0x698 <runnable+0x1c>
                {
                    Waking_sequence_Init();
     694:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Waking_sequence_Init>
                }

               KeyPad_GetValue();
     698:	0e 94 49 04 	call	0x892	; 0x892 <KeyPad_GetValue>
                

            }
            while((key!='+' && key!='*' && key!='-' ));
     69c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <key>
     6a0:	96 ed       	ldi	r25, 0xD6	; 214
     6a2:	98 0f       	add	r25, r24
     6a4:	92 30       	cpi	r25, 0x02	; 2
     6a6:	10 f0       	brcs	.+4      	; 0x6ac <runnable+0x30>
     6a8:	8d 32       	cpi	r24, 0x2D	; 45
     6aa:	71 f7       	brne	.-36     	; 0x688 <runnable+0xc>
        }

        LCD_Clear();
     6ac:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_Clear>

        if (key  =='0')
     6b0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <key>
     6b4:	80 33       	cpi	r24, 0x30	; 48
     6b6:	19 f4       	brne	.+6      	; 0x6be <runnable+0x42>
        {
            clear_flag =1;
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <clear_flag>
        }
        switch (key)
     6be:	8b 32       	cpi	r24, 0x2B	; 43
     6c0:	31 f0       	breq	.+12     	; 0x6ce <runnable+0x52>
     6c2:	8d 32       	cpi	r24, 0x2D	; 45
     6c4:	79 f0       	breq	.+30     	; 0x6e4 <runnable+0x68>
     6c6:	8a 32       	cpi	r24, 0x2A	; 42
     6c8:	09 f0       	breq	.+2      	; 0x6cc <runnable+0x50>
     6ca:	44 c0       	rjmp	.+136    	; 0x754 <runnable+0xd8>
     6cc:	31 c0       	rjmp	.+98     	; 0x730 <runnable+0xb4>
        {
        case '+':
            SET();
     6ce:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SET>
            MATCH();
     6d2:	0e 94 81 02 	call	0x502	; 0x502 <MATCH>
            if (matching==MATCHED)
     6d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	d9 f5       	brne	.+118    	; 0x754 <runnable+0xd8>
            {
                Waking_sequence_Init();
     6de:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Waking_sequence_Init>
     6e2:	38 c0       	rjmp	.+112    	; 0x754 <runnable+0xd8>
            }
            break;

        case '-':
            key='u';
     6e4:	85 e7       	ldi	r24, 0x75	; 117
     6e6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <key>
            do
            {
                KeyPad_GetValue();
     6ea:	0e 94 49 04 	call	0x892	; 0x892 <KeyPad_GetValue>
            }
            while(key=='u');
     6ee:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <key>
     6f2:	85 37       	cpi	r24, 0x75	; 117
     6f4:	d1 f3       	breq	.-12     	; 0x6ea <runnable+0x6e>
			if(key=='1')
     6f6:	81 33       	cpi	r24, 0x31	; 49
     6f8:	21 f4       	brne	.+8      	; 0x702 <runnable+0x86>
				cancel_timer(1);
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 bc 01 	call	0x378	; 0x378 <cancel_timer>
     700:	0b c0       	rjmp	.+22     	; 0x718 <runnable+0x9c>
			else if (key=='2')
     702:	82 33       	cpi	r24, 0x32	; 50
     704:	21 f4       	brne	.+8      	; 0x70e <runnable+0x92>
				cancel_timer(2);
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	0e 94 bc 01 	call	0x378	; 0x378 <cancel_timer>
     70c:	05 c0       	rjmp	.+10     	; 0x718 <runnable+0x9c>
			else if(key=='3')
     70e:	83 33       	cpi	r24, 0x33	; 51
     710:	19 f4       	brne	.+6      	; 0x718 <runnable+0x9c>
				cancel_timer(3);
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	0e 94 bc 01 	call	0x378	; 0x378 <cancel_timer>
            key='u';
     718:	85 e7       	ldi	r24, 0x75	; 117
     71a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <key>
            MATCH();
     71e:	0e 94 81 02 	call	0x502	; 0x502 <MATCH>
            if (matching==MATCHED)
     722:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	a9 f4       	brne	.+42     	; 0x754 <runnable+0xd8>
            {
                Waking_sequence_Init();
     72a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Waking_sequence_Init>
     72e:	12 c0       	rjmp	.+36     	; 0x754 <runnable+0xd8>
            }
            break;

        case'*':
            Timers_Display();
     730:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Timers_Display>
            while(key !='0')
     734:	0b c0       	rjmp	.+22     	; 0x74c <runnable+0xd0>
            {
                KeyPad_GetValue();
     736:	0e 94 49 04 	call	0x892	; 0x892 <KeyPad_GetValue>
                MATCH();
     73a:	0e 94 81 02 	call	0x502	; 0x502 <MATCH>
                if (matching==MATCHED)
     73e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	19 f4       	brne	.+6      	; 0x74c <runnable+0xd0>
                {
                    Waking_sequence_Init();
     746:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Waking_sequence_Init>
                    break;
     74a:	04 c0       	rjmp	.+8      	; 0x754 <runnable+0xd8>
            }
            break;

        case'*':
            Timers_Display();
            while(key !='0')
     74c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <key>
     750:	80 33       	cpi	r24, 0x30	; 48
     752:	89 f7       	brne	.-30     	; 0x736 <runnable+0xba>


        
        }

        MATCH();
     754:	0e 94 81 02 	call	0x502	; 0x502 <MATCH>
        if (matching==MATCHED)
     758:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     75c:	81 30       	cpi	r24, 0x01	; 1
     75e:	11 f4       	brne	.+4      	; 0x764 <runnable+0xe8>
        {
            Waking_sequence_Init();
     760:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Waking_sequence_Init>
     764:	08 95       	ret

00000766 <Init>:
        }
    }
	
void Init(){
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	00 d0       	rcall	.+0      	; 0x76c <Init+0x6>
     76c:	00 d0       	rcall	.+0      	; 0x76e <Init+0x8>
     76e:	00 d0       	rcall	.+0      	; 0x770 <Init+0xa>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
     774:	0e 94 32 05 	call	0xa64	; 0xa64 <LCD_Init>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
     778:	41 e0       	ldi	r20, 0x01	; 1
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
	TIMER_ConfigType ConfigStruct = {NORMAL_MODE,F_CPU_1024_2,247};
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	26 e0       	ldi	r18, 0x06	; 6
     788:	fc 01       	movw	r30, r24
     78a:	11 92       	st	Z+, r1
     78c:	2a 95       	dec	r18
     78e:	e9 f7       	brne	.-6      	; 0x78a <Init+0x24>
     790:	27 e0       	ldi	r18, 0x07	; 7
     792:	2a 83       	std	Y+2, r18	; 0x02
     794:	27 ef       	ldi	r18, 0xF7	; 247
     796:	2b 83       	std	Y+3, r18	; 0x03
	TIMER2_Init(&ConfigStruct);
     798:	0e 94 6d 08 	call	0x10da	; 0x10da <TIMER2_Init>
	keyPad_Init();
     79c:	0e 94 10 04 	call	0x820	; 0x820 <keyPad_Init>
	ADC_Init_N(VREF_VCC, ADC_SCALER_128);
     7a0:	67 e0       	ldi	r22, 0x07	; 7
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 81 06 	call	0xd02	; 0xd02 <ADC_Init_N>
	timer0_config.enu_timer0_prescaler = TIMER_PRESCALER_1024;
     7a8:	ea ea       	ldi	r30, 0xAA	; 170
     7aa:	f1 e0       	ldi	r31, 0x01	; 1
     7ac:	85 e0       	ldi	r24, 0x05	; 5
     7ae:	80 83       	st	Z, r24
	timer0_config.enu_timer0_mode = PWM_FAST;
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	81 83       	std	Z+1, r24	; 0x01
	timer0_config.enu_timer0_int_en = POLLING;
     7b4:	12 82       	std	Z+2, r1	; 0x02
	timer0_config.enu_timer0_oc0 = CLEAR_OC0;
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	83 83       	std	Z+3, r24	; 0x03
	timer0_config.compare_val = 0;
     7ba:	15 82       	std	Z+5, r1	; 0x05
	timer0_config.preload = 0;
     7bc:	14 82       	std	Z+4, r1	; 0x04
	TIMER0_Init(&timer0_config);
     7be:	cf 01       	movw	r24, r30
     7c0:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <TIMER0_Init>
	TIMER2_setCallBack(count_time);
     7c4:	89 e4       	ldi	r24, 0x49	; 73
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TIMER2_setCallBack>
	SET_BIT(SREG,7);
     7cc:	8f b7       	in	r24, 0x3f	; 63
     7ce:	80 68       	ori	r24, 0x80	; 128
     7d0:	8f bf       	out	0x3f, r24	; 63
     7d2:	26 96       	adiw	r28, 0x06	; 6
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <BUZZER_TurnOn>:
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	48 f4       	brcc	.+18     	; 0x7fa <BUZZER_TurnOn+0x16>
     7e8:	81 11       	cpse	r24, r1
     7ea:	09 c0       	rjmp	.+18     	; 0x7fe <BUZZER_TurnOn+0x1a>
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	66 e0       	ldi	r22, 0x06	; 6
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	08 95       	ret
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	08 95       	ret
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	08 95       	ret

00000802 <BUZZER_TurnOff>:
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <BUZZER_TurnOff+0x16>
     806:	81 11       	cpse	r24, r1
     808:	09 c0       	rjmp	.+18     	; 0x81c <BUZZER_TurnOff+0x1a>
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	66 e0       	ldi	r22, 0x06	; 6
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	08 95       	ret
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	08 95       	ret
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	08 95       	ret

00000820 <keyPad_Init>:
 const u8 KeyPad_Cols[KEYPAD_COLUMNS_NUMBER] = {KEYPAD_COLUMN0, KEYPAD_COLUMN1, KEYPAD_COLUMN2, KEYPAD_COLUMN3};
 const u8 KeyPad_Rows[KEYPAD_ROWS_NUMBER] = {KEYPAD_ROW0, KEYPAD_ROW1, KEYPAD_ROW2, KEYPAD_ROW3};

 void keyPad_Init(void)
 {
	 DIO_SetPinDirection(KEYPAD_COLUMN_PORT, KEYPAD_COLUMN0, DIO_PIN_INPUT);
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	67 e0       	ldi	r22, 0x07	; 7
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
	 DIO_SetPinDirection(KEYPAD_COLUMN_PORT, KEYPAD_COLUMN1, DIO_PIN_INPUT);
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	66 e0       	ldi	r22, 0x06	; 6
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
	 DIO_SetPinDirection(KEYPAD_COLUMN_PORT, KEYPAD_COLUMN2, DIO_PIN_INPUT);
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	65 e0       	ldi	r22, 0x05	; 5
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
	 DIO_SetPinDirection(KEYPAD_COLUMN_PORT, KEYPAD_COLUMN3, DIO_PIN_INPUT);
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	63 e0       	ldi	r22, 0x03	; 3
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>

	 DIO_SetPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW0, DIO_PIN_INPUT);
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	65 e0       	ldi	r22, 0x05	; 5
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
	 DIO_SetPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW1, DIO_PIN_INPUT);
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	64 e0       	ldi	r22, 0x04	; 4
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
	 DIO_SetPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW2, DIO_PIN_INPUT);
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	63 e0       	ldi	r22, 0x03	; 3
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
	 DIO_SetPinDirection(KEYPAD_ROW_PORT, KEYPAD_ROW3, DIO_PIN_INPUT);
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	62 e0       	ldi	r22, 0x02	; 2
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>

	 DIO_SetPullUp(KEYPAD_ROW_PORT, KEYPAD_ROW0);
     870:	65 e0       	ldi	r22, 0x05	; 5
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_SetPullUp>
	 DIO_SetPullUp(KEYPAD_ROW_PORT, KEYPAD_ROW1);
     878:	64 e0       	ldi	r22, 0x04	; 4
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_SetPullUp>
	 DIO_SetPullUp(KEYPAD_ROW_PORT, KEYPAD_ROW2);
     880:	63 e0       	ldi	r22, 0x03	; 3
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_SetPullUp>
	 DIO_SetPullUp(KEYPAD_ROW_PORT, KEYPAD_ROW3);
     888:	62 e0       	ldi	r22, 0x02	; 2
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_SetPullUp>
     890:	08 95       	ret

00000892 <KeyPad_GetValue>:
 }

KEYPAD_ERROR_T  KeyPad_GetValue(void)
{
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	1f 92       	push	r1
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
	u8 cols = 0;
	u8 rows = 0;
	KEYPAD_ERROR_T status=NOT_PRESSED ;
	u8 Pin_value;

	for (rows = 0; rows < KEYPAD_ROWS_NUMBER; ++rows)
     8ac:	b1 2c       	mov	r11, r1
     8ae:	4a c0       	rjmp	.+148    	; 0x944 <KeyPad_GetValue+0xb2>
	{
		DIO_SetPinDirection(KEYPAD_ROW_PORT, KeyPad_Rows[rows], DIO_PIN_OUTPUT);
     8b0:	cb 2c       	mov	r12, r11
     8b2:	d1 2c       	mov	r13, r1
     8b4:	f6 01       	movw	r30, r12
     8b6:	e7 57       	subi	r30, 0x77	; 119
     8b8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ba:	a0 80       	ld	r10, Z
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	6a 2d       	mov	r22, r10
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
		DIO_SetPinValue(KEYPAD_ROW_PORT, KeyPad_Rows[rows], DIO_PIN_LOW);
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	6a 2d       	mov	r22, r10
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>

		for (cols = 0; cols < KEYPAD_COLUMNS_NUMBER; ++cols)
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	30 c0       	rjmp	.+96     	; 0x934 <KeyPad_GetValue+0xa2>
		{
			DIO_GetPinValue(KEYPAD_COLUMN_PORT, KeyPad_Cols[cols],&Pin_value);
     8d4:	e1 2e       	mov	r14, r17
     8d6:	f1 2c       	mov	r15, r1
     8d8:	f7 01       	movw	r30, r14
     8da:	e3 57       	subi	r30, 0x73	; 115
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	00 81       	ld	r16, Z
     8e0:	ae 01       	movw	r20, r28
     8e2:	4f 5f       	subi	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	60 2f       	mov	r22, r16
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_GetPinValue>
			if (Pin_value == DIO_PIN_LOW)
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	81 11       	cpse	r24, r1
     8f2:	1f c0       	rjmp	.+62     	; 0x932 <KeyPad_GetValue+0xa0>
     8f4:	07 c0       	rjmp	.+14     	; 0x904 <KeyPad_GetValue+0x72>
			{
				while (Pin_value == DIO_PIN_LOW){
					DIO_GetPinValue(KEYPAD_COLUMN_PORT, KeyPad_Cols[cols],&Pin_value);
     8f6:	ae 01       	movw	r20, r28
     8f8:	4f 5f       	subi	r20, 0xFF	; 255
     8fa:	5f 4f       	sbci	r21, 0xFF	; 255
     8fc:	60 2f       	mov	r22, r16
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_GetPinValue>
		for (cols = 0; cols < KEYPAD_COLUMNS_NUMBER; ++cols)
		{
			DIO_GetPinValue(KEYPAD_COLUMN_PORT, KeyPad_Cols[cols],&Pin_value);
			if (Pin_value == DIO_PIN_LOW)
			{
				while (Pin_value == DIO_PIN_LOW){
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	88 23       	and	r24, r24
     908:	b1 f3       	breq	.-20     	; 0x8f6 <KeyPad_GetValue+0x64>
					DIO_GetPinValue(KEYPAD_COLUMN_PORT, KeyPad_Cols[cols],&Pin_value);
				}
				DIO_SetPinDirection(KEYPAD_ROW_PORT, KeyPad_Rows[rows], DIO_PIN_INPUT);
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	6a 2d       	mov	r22, r10
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
				key= KeyPad_Values[rows][cols];
     914:	c6 01       	movw	r24, r12
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	8f 56       	subi	r24, 0x6F	; 111
     920:	9e 4f       	sbci	r25, 0xFE	; 254
     922:	fc 01       	movw	r30, r24
     924:	ee 0d       	add	r30, r14
     926:	ff 1d       	adc	r31, r15
     928:	80 81       	ld	r24, Z
     92a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <key>
				status =PRESSED;
				return status;
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e c0       	rjmp	.+28     	; 0x94e <KeyPad_GetValue+0xbc>
	for (rows = 0; rows < KEYPAD_ROWS_NUMBER; ++rows)
	{
		DIO_SetPinDirection(KEYPAD_ROW_PORT, KeyPad_Rows[rows], DIO_PIN_OUTPUT);
		DIO_SetPinValue(KEYPAD_ROW_PORT, KeyPad_Rows[rows], DIO_PIN_LOW);

		for (cols = 0; cols < KEYPAD_COLUMNS_NUMBER; ++cols)
     932:	1f 5f       	subi	r17, 0xFF	; 255
     934:	14 30       	cpi	r17, 0x04	; 4
     936:	70 f2       	brcs	.-100    	; 0x8d4 <KeyPad_GetValue+0x42>
				return status;
				
			}
		}

		DIO_SetPinDirection(KEYPAD_ROW_PORT, KeyPad_Rows[rows], DIO_PIN_INPUT);
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	6a 2d       	mov	r22, r10
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
	u8 cols = 0;
	u8 rows = 0;
	KEYPAD_ERROR_T status=NOT_PRESSED ;
	u8 Pin_value;

	for (rows = 0; rows < KEYPAD_ROWS_NUMBER; ++rows)
     942:	b3 94       	inc	r11
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	8b 15       	cp	r24, r11
     948:	08 f0       	brcs	.+2      	; 0x94c <KeyPad_GetValue+0xba>
     94a:	b2 cf       	rjmp	.-156    	; 0x8b0 <KeyPad_GetValue+0x1e>
		}

		DIO_SetPinDirection(KEYPAD_ROW_PORT, KeyPad_Rows[rows], DIO_PIN_INPUT);
	}

	return status;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	0f 90       	pop	r0
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	08 95       	ret

00000966 <LCD_WriteCommand>:
    
    
}

void LCD_WriteCommand(u8 cmd)
{
     966:	cf 93       	push	r28
     968:	c8 2f       	mov	r28, r24
    /*
    RS (Register Select)
    RS = 0 -> Command Register is selected
    */
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_RS_PIN ,DIO_PIN_LOW);
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	63 e0       	ldi	r22, 0x03	; 3
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	8f e9       	ldi	r24, 0x9F	; 159
     976:	9f e0       	ldi	r25, 0x0F	; 15
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <LCD_WriteCommand+0x12>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <LCD_WriteCommand+0x18>
     97e:	00 00       	nop
    For 4-bit interface data, only four bus lines (DB4 to DB7) are used for transfer. Bus lines DB0 to DB3
    are disabled. The data transfer between the HD44780U and the MPU is completed after the 4-bit data
    has been transferred twice. As for the order of data transfer, the four high order bits (for 8-bit operation,
    DB4 to DB7) are transferred before the four low order bits (for 8-bit operation, DB0 to DB3).
    */
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D4 , GET_BIT(cmd,4));
     980:	c4 fb       	bst	r28, 4
     982:	44 27       	eor	r20, r20
     984:	40 f9       	bld	r20, 0
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D5 , GET_BIT(cmd,5));
     98e:	c5 fb       	bst	r28, 5
     990:	44 27       	eor	r20, r20
     992:	40 f9       	bld	r20, 0
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D6 , GET_BIT(cmd,6));
     99c:	c6 fb       	bst	r28, 6
     99e:	44 27       	eor	r20, r20
     9a0:	40 f9       	bld	r20, 0
     9a2:	62 e0       	ldi	r22, 0x02	; 2
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D7 , GET_BIT(cmd,7));
     9aa:	4c 2f       	mov	r20, r28
     9ac:	44 1f       	adc	r20, r20
     9ae:	44 27       	eor	r20, r20
     9b0:	44 1f       	adc	r20, r20
     9b2:	64 e0       	ldi	r22, 0x04	; 4
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     9ba:	8f e9       	ldi	r24, 0x9F	; 159
     9bc:	9f e0       	ldi	r25, 0x0F	; 15
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <LCD_WriteCommand+0x58>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <LCD_WriteCommand+0x5e>
     9c4:	00 00       	nop
    
    
    /*
    Falling Edge to process the data
    */
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_HIGH);
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     9d0:	8f e9       	ldi	r24, 0x9F	; 159
     9d2:	9f e0       	ldi	r25, 0x0F	; 15
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <LCD_WriteCommand+0x6e>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <LCD_WriteCommand+0x74>
     9da:	00 00       	nop
    _delay_ms(1);
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_LOW);      
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     9e6:	8f e9       	ldi	r24, 0x9F	; 159
     9e8:	9f e0       	ldi	r25, 0x0F	; 15
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <LCD_WriteCommand+0x84>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <LCD_WriteCommand+0x8a>
     9f0:	00 00       	nop
    _delay_ms(1);


    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D4 , GET_BIT(cmd,0));
     9f2:	4c 2f       	mov	r20, r28
     9f4:	41 70       	andi	r20, 0x01	; 1
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D5 , GET_BIT(cmd,1));
     9fe:	c1 fb       	bst	r28, 1
     a00:	44 27       	eor	r20, r20
     a02:	40 f9       	bld	r20, 0
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D6 , GET_BIT(cmd,2));
     a0c:	c2 fb       	bst	r28, 2
     a0e:	44 27       	eor	r20, r20
     a10:	40 f9       	bld	r20, 0
     a12:	62 e0       	ldi	r22, 0x02	; 2
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D7 , GET_BIT(cmd,3));
     a1a:	c3 fb       	bst	r28, 3
     a1c:	44 27       	eor	r20, r20
     a1e:	40 f9       	bld	r20, 0
     a20:	64 e0       	ldi	r22, 0x04	; 4
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     a28:	8f e9       	ldi	r24, 0x9F	; 159
     a2a:	9f e0       	ldi	r25, 0x0F	; 15
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <LCD_WriteCommand+0xc6>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <LCD_WriteCommand+0xcc>
     a32:	00 00       	nop
    _delay_ms(1);
    
    /*
    Falling Edge to process the data
    */
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_HIGH);     
     a34:	41 e0       	ldi	r20, 0x01	; 1
     a36:	62 e0       	ldi	r22, 0x02	; 2
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     a3e:	8f e9       	ldi	r24, 0x9F	; 159
     a40:	9f e0       	ldi	r25, 0x0F	; 15
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCD_WriteCommand+0xdc>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <LCD_WriteCommand+0xe2>
     a48:	00 00       	nop
    _delay_ms(1);
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_LOW);
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     a54:	8f e1       	ldi	r24, 0x1F	; 31
     a56:	9e e4       	ldi	r25, 0x4E	; 78
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <LCD_WriteCommand+0xf2>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <LCD_WriteCommand+0xf8>
     a5e:	00 00       	nop
    
    _delay_ms(5); /*LCD store delay*/
}
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <LCD_Init>:
/*https://www.8051projects.net/lcd-interfacing/commands.php*/

void LCD_Init(void)
{
    
    DIO_SetPinDirection(LCD_4BIT_CMD_PORT ,LCD_RS_PIN ,DIO_PIN_OUTPUT);
     a64:	41 e0       	ldi	r20, 0x01	; 1
     a66:	63 e0       	ldi	r22, 0x03	; 3
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
    /*DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RW_PIN ,DIO_PIN_OUTPUT);*/
    DIO_SetPinDirection(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_OUTPUT);
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	62 e0       	ldi	r22, 0x02	; 2
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
    
    DIO_SetPinDirection(LCD_4BIT_DATA_PORT ,LCD_D4 ,DIO_PIN_OUTPUT);
     a78:	41 e0       	ldi	r20, 0x01	; 1
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
    DIO_SetPinDirection(LCD_4BIT_DATA_PORT ,LCD_D5 ,DIO_PIN_OUTPUT);
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
    DIO_SetPinDirection(LCD_4BIT_DATA_PORT ,LCD_D6 ,DIO_PIN_OUTPUT);
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	62 e0       	ldi	r22, 0x02	; 2
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
    DIO_SetPinDirection(LCD_4BIT_DATA_PORT ,LCD_D7 ,DIO_PIN_OUTPUT);
     a96:	41 e0       	ldi	r20, 0x01	; 1
     a98:	64 e0       	ldi	r22, 0x04	; 4
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_SetPinDirection>
     aa0:	8f e9       	ldi	r24, 0x9F	; 159
     aa2:	9f e0       	ldi	r25, 0x0F	; 15
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <LCD_Init+0x40>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <LCD_Init+0x46>
     aaa:	00 00       	nop
    
   _delay_ms(1);


    LCD_WriteCommand (FUNCTION_SET);
     aac:	88 e2       	ldi	r24, 0x28	; 40
     aae:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_WriteCommand>
     ab2:	8f e9       	ldi	r24, 0x9F	; 159
     ab4:	9f e0       	ldi	r25, 0x0F	; 15
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <LCD_Init+0x52>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <LCD_Init+0x58>
     abc:	00 00       	nop
    _delay_ms(1);
    LCD_WriteCommand (CLEAR_DISPLAY); 
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_WriteCommand>
     ac4:	8f e9       	ldi	r24, 0x9F	; 159
     ac6:	9f e0       	ldi	r25, 0x0F	; 15
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <LCD_Init+0x64>
     acc:	00 c0       	rjmp	.+0      	; 0xace <LCD_Init+0x6a>
     ace:	00 00       	nop
    _delay_ms(1);
    LCD_WriteCommand (DISPLAY_ON_CURSOR_BLINKING); 
     ad0:	8f e0       	ldi	r24, 0x0F	; 15
     ad2:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_WriteCommand>
     ad6:	8f e9       	ldi	r24, 0x9F	; 159
     ad8:	9f e0       	ldi	r25, 0x0F	; 15
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <LCD_Init+0x76>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <LCD_Init+0x7c>
     ae0:	00 00       	nop
     ae2:	08 95       	ret

00000ae4 <LCD_WriteChar>:
    
    _delay_ms(5); /*LCD store delay*/
}

void LCD_WriteChar(u8 chr)
{  
     ae4:	cf 93       	push	r28
     ae6:	c8 2f       	mov	r28, r24
    /*
    RS (Register Select)
    RS = 1 -> Data Register is selected
    */
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_RS_PIN ,DIO_PIN_HIGH);
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	63 e0       	ldi	r22, 0x03	; 3
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     af2:	8f e9       	ldi	r24, 0x9F	; 159
     af4:	9f e0       	ldi	r25, 0x0F	; 15
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <LCD_WriteChar+0x12>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <LCD_WriteChar+0x18>
     afc:	00 00       	nop
    _delay_ms(1);

    
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D4 , GET_BIT(chr,4));
     afe:	c4 fb       	bst	r28, 4
     b00:	44 27       	eor	r20, r20
     b02:	40 f9       	bld	r20, 0
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D5 , GET_BIT(chr,5));
     b0c:	c5 fb       	bst	r28, 5
     b0e:	44 27       	eor	r20, r20
     b10:	40 f9       	bld	r20, 0
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D6 , GET_BIT(chr,6));
     b1a:	c6 fb       	bst	r28, 6
     b1c:	44 27       	eor	r20, r20
     b1e:	40 f9       	bld	r20, 0
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D7 , GET_BIT(chr,7));
     b28:	4c 2f       	mov	r20, r28
     b2a:	44 1f       	adc	r20, r20
     b2c:	44 27       	eor	r20, r20
     b2e:	44 1f       	adc	r20, r20
     b30:	64 e0       	ldi	r22, 0x04	; 4
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     b38:	8f e9       	ldi	r24, 0x9F	; 159
     b3a:	9f e0       	ldi	r25, 0x0F	; 15
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <LCD_WriteChar+0x58>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <LCD_WriteChar+0x5e>
     b42:	00 00       	nop
    
    
    /*
    Falling Edge to process the data
    */
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_HIGH);
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	62 e0       	ldi	r22, 0x02	; 2
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     b4e:	8f e9       	ldi	r24, 0x9F	; 159
     b50:	9f e0       	ldi	r25, 0x0F	; 15
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	f1 f7       	brne	.-4      	; 0xb52 <LCD_WriteChar+0x6e>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <LCD_WriteChar+0x74>
     b58:	00 00       	nop
    _delay_ms(1);
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_LOW);     
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     b64:	8f e9       	ldi	r24, 0x9F	; 159
     b66:	9f e0       	ldi	r25, 0x0F	; 15
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <LCD_WriteChar+0x84>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <LCD_WriteChar+0x8a>
     b6e:	00 00       	nop
    _delay_ms(1);


    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D4 , GET_BIT(chr,0));
     b70:	4c 2f       	mov	r20, r28
     b72:	41 70       	andi	r20, 0x01	; 1
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D5 , GET_BIT(chr,1));
     b7c:	c1 fb       	bst	r28, 1
     b7e:	44 27       	eor	r20, r20
     b80:	40 f9       	bld	r20, 0
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D6 , GET_BIT(chr,2));
     b8a:	c2 fb       	bst	r28, 2
     b8c:	44 27       	eor	r20, r20
     b8e:	40 f9       	bld	r20, 0
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
    DIO_SetPinValue (LCD_4BIT_DATA_PORT, LCD_D7 , GET_BIT(chr,3));
     b98:	c3 fb       	bst	r28, 3
     b9a:	44 27       	eor	r20, r20
     b9c:	40 f9       	bld	r20, 0
     b9e:	64 e0       	ldi	r22, 0x04	; 4
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     ba6:	8f e9       	ldi	r24, 0x9F	; 159
     ba8:	9f e0       	ldi	r25, 0x0F	; 15
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <LCD_WriteChar+0xc6>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <LCD_WriteChar+0xcc>
     bb0:	00 00       	nop
    _delay_ms(1);
    
    /*
    Falling Edge to process the data
    */
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_HIGH);     /*Enable=1*/
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     bbc:	8f e9       	ldi	r24, 0x9F	; 159
     bbe:	9f e0       	ldi	r25, 0x0F	; 15
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <LCD_WriteChar+0xdc>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <LCD_WriteChar+0xe2>
     bc6:	00 00       	nop
    _delay_ms(1);
    DIO_SetPinValue(LCD_4BIT_CMD_PORT ,LCD_EN_PIN ,DIO_PIN_LOW);
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	62 e0       	ldi	r22, 0x02	; 2
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_SetPinValue>
     bd2:	8f e1       	ldi	r24, 0x1F	; 31
     bd4:	9e e4       	ldi	r25, 0x4E	; 78
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	f1 f7       	brne	.-4      	; 0xbd6 <LCD_WriteChar+0xf2>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <LCD_WriteChar+0xf8>
     bdc:	00 00       	nop
    
    _delay_ms(5); /* LCD store delay*/
}
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret

00000be2 <LCD_WriteString>:

LCD_errors_status LCD_WriteString(char* str)
{
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	8c 01       	movw	r16, r24
	
    uint8_t i = 0;
     bea:	c0 e0       	ldi	r28, 0x00	; 0
    
    while(str[i] != '\0')
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <LCD_WriteString+0x16>
    {
        LCD_WriteChar(str[i]);
     bee:	0e 94 72 05 	call	0xae4	; 0xae4 <LCD_WriteChar>
        i++;
     bf2:	cf 5f       	subi	r28, 0xFF	; 255
		if(i>LCD_WIDTH)
     bf4:	c5 31       	cpi	r28, 0x15	; 21
     bf6:	38 f4       	brcc	.+14     	; 0xc06 <LCD_WriteString+0x24>
LCD_errors_status LCD_WriteString(char* str)
{
	
    uint8_t i = 0;
    
    while(str[i] != '\0')
     bf8:	f8 01       	movw	r30, r16
     bfa:	ec 0f       	add	r30, r28
     bfc:	f1 1d       	adc	r31, r1
     bfe:	80 81       	ld	r24, Z
     c00:	81 11       	cpse	r24, r1
     c02:	f5 cf       	rjmp	.-22     	; 0xbee <LCD_WriteString+0xc>
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <LCD_WriteString+0x26>
    {
        LCD_WriteChar(str[i]);
        i++;
		if(i>LCD_WIDTH)
			return LCD_MAX_SIZE_REACHED_ERROR;
     c06:	81 e0       	ldi	r24, 0x01	; 1
    }
	return LCD_no_error;
}
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	08 95       	ret

00000c10 <LCD_Goto>:


LCD_errors_status LCD_Goto(u8 row, u8 col)
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	00 d0       	rcall	.+0      	; 0xc16 <LCD_Goto+0x6>
     c16:	00 d0       	rcall	.+0      	; 0xc18 <LCD_Goto+0x8>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
	
	if(row>MAX_NUMBER_OF_ROWS)
     c1c:	85 30       	cpi	r24, 0x05	; 5
     c1e:	b0 f4       	brcc	.+44     	; 0xc4c <LCD_Goto+0x3c>
		return LCD_MAX_ROW_SIZE_EXCEEDED;
		
	else if (col>LCD_WIDTH)
     c20:	65 31       	cpi	r22, 0x15	; 21
     c22:	b0 f4       	brcc	.+44     	; 0xc50 <LCD_Goto+0x40>
		return LCD_MAX_COLUMN_SIZE_EXCEEDED;
	
	
	u8 pos[] = { 0x80, 0xC0, 0x94, 0xD4};
     c24:	90 e8       	ldi	r25, 0x80	; 128
     c26:	99 83       	std	Y+1, r25	; 0x01
     c28:	90 ec       	ldi	r25, 0xC0	; 192
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	94 e9       	ldi	r25, 0x94	; 148
     c2e:	9b 83       	std	Y+3, r25	; 0x03
     c30:	94 ed       	ldi	r25, 0xD4	; 212
     c32:	9c 83       	std	Y+4, r25	; 0x04
	LCD_WriteCommand(pos[row]+col);
     c34:	e1 e0       	ldi	r30, 0x01	; 1
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	ec 0f       	add	r30, r28
     c3a:	fd 1f       	adc	r31, r29
     c3c:	e8 0f       	add	r30, r24
     c3e:	f1 1d       	adc	r31, r1
     c40:	80 81       	ld	r24, Z
     c42:	86 0f       	add	r24, r22
     c44:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_WriteCommand>
	
	return LCD_no_error;
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <LCD_Goto+0x42>

LCD_errors_status LCD_Goto(u8 row, u8 col)
{
	
	if(row>MAX_NUMBER_OF_ROWS)
		return LCD_MAX_ROW_SIZE_EXCEEDED;
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <LCD_Goto+0x42>
		
	else if (col>LCD_WIDTH)
		return LCD_MAX_COLUMN_SIZE_EXCEEDED;
     c50:	83 e0       	ldi	r24, 0x03	; 3
	u8 pos[] = { 0x80, 0xC0, 0x94, 0xD4};
	LCD_WriteCommand(pos[row]+col);
	
	return LCD_no_error;

}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <LCD_Clear>:

void LCD_Clear(void)
{
    LCD_WriteCommand(0x01);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_WriteCommand>
     c66:	08 95       	ret

00000c68 <LCD_WriteNumber>:
}

void LCD_WriteNumber( u32 num)
{
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	2a 97       	sbiw	r28, 0x0a	; 10
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
	u8 str[10],i=0,j;
	if (num==0)
     c7e:	61 15       	cp	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	81 05       	cpc	r24, r1
     c84:	91 05       	cpc	r25, r1
     c86:	c1 f4       	brne	.+48     	; 0xcb8 <LCD_WriteNumber+0x50>
	{
		LCD_WriteChar('0');
     c88:	80 e3       	ldi	r24, 0x30	; 48
     c8a:	0e 94 72 05 	call	0xae4	; 0xae4 <LCD_WriteChar>
     c8e:	2a c0       	rjmp	.+84     	; 0xce4 <LCD_WriteNumber+0x7c>
		LCD_WriteChar('-');
	}
	
	while(num)
	{
		str[i]=num%10 +'0';
     c90:	2a e0       	ldi	r18, 0x0A	; 10
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	0e 94 a2 09 	call	0x1344	; 0x1344 <__udivmodsi4>
     c9c:	e1 e0       	ldi	r30, 0x01	; 1
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	ec 0f       	add	r30, r28
     ca2:	fd 1f       	adc	r31, r29
     ca4:	e1 0f       	add	r30, r17
     ca6:	f1 1d       	adc	r31, r1
     ca8:	60 5d       	subi	r22, 0xD0	; 208
     caa:	60 83       	st	Z, r22
		i++;
     cac:	1f 5f       	subi	r17, 0xFF	; 255
		num=num/10;
     cae:	62 2f       	mov	r22, r18
     cb0:	73 2f       	mov	r23, r19
     cb2:	84 2f       	mov	r24, r20
     cb4:	95 2f       	mov	r25, r21
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <LCD_WriteNumber+0x52>
     cb8:	10 e0       	ldi	r17, 0x00	; 0
	{
		num=num*(-1);
		LCD_WriteChar('-');
	}
	
	while(num)
     cba:	61 15       	cp	r22, r1
     cbc:	71 05       	cpc	r23, r1
     cbe:	81 05       	cpc	r24, r1
     cc0:	91 05       	cpc	r25, r1
     cc2:	31 f7       	brne	.-52     	; 0xc90 <LCD_WriteNumber+0x28>
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <LCD_WriteNumber+0x78>
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
	{
		LCD_WriteChar(str[j-1]);
     cc6:	e1 2f       	mov	r30, r17
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	8c 0f       	add	r24, r28
     cd2:	9d 1f       	adc	r25, r29
     cd4:	e8 0f       	add	r30, r24
     cd6:	f9 1f       	adc	r31, r25
     cd8:	80 81       	ld	r24, Z
     cda:	0e 94 72 05 	call	0xae4	; 0xae4 <LCD_WriteChar>
	{
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	for (j=i;j>0;j--)
     cde:	11 50       	subi	r17, 0x01	; 1
     ce0:	11 11       	cpse	r17, r1
     ce2:	f1 cf       	rjmp	.-30     	; 0xcc6 <LCD_WriteNumber+0x5e>
	{
		LCD_WriteChar(str[j-1]);
	}

}
     ce4:	2a 96       	adiw	r28, 0x0a	; 10
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	08 95       	ret

00000cf8 <main>:

#include "sunrise_alarm.h"
extern u16 Adc_Data;
int main(void)
{
   Init();
     cf8:	0e 94 b3 03 	call	0x766	; 0x766 <Init>
   
while (1)
{
	
	runnable();
     cfc:	0e 94 3e 03 	call	0x67c	; 0x67c <runnable>
     d00:	fd cf       	rjmp	.-6      	; 0xcfc <main+0x4>

00000d02 <ADC_Init_N>:
		status = conversion_NOTcomplete;
	}
	CLR_BIT(ADCSRA, ADIF);
	return status;
    
}
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	38 f5       	brcc	.+78     	; 0xd54 <ADC_Init_N+0x52>
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	89 f0       	breq	.+34     	; 0xd2c <ADC_Init_N+0x2a>
     d0a:	48 f0       	brcs	.+18     	; 0xd1e <ADC_Init_N+0x1c>
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	a1 f4       	brne	.+40     	; 0xd38 <ADC_Init_N+0x36>
     d10:	87 b1       	in	r24, 0x07	; 7
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	87 b9       	out	0x07, r24	; 7
     d16:	87 b1       	in	r24, 0x07	; 7
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	87 b9       	out	0x07, r24	; 7
     d1c:	0d c0       	rjmp	.+26     	; 0xd38 <ADC_Init_N+0x36>
     d1e:	87 b1       	in	r24, 0x07	; 7
     d20:	8f 7b       	andi	r24, 0xBF	; 191
     d22:	87 b9       	out	0x07, r24	; 7
     d24:	87 b1       	in	r24, 0x07	; 7
     d26:	8f 77       	andi	r24, 0x7F	; 127
     d28:	87 b9       	out	0x07, r24	; 7
     d2a:	06 c0       	rjmp	.+12     	; 0xd38 <ADC_Init_N+0x36>
     d2c:	87 b1       	in	r24, 0x07	; 7
     d2e:	80 64       	ori	r24, 0x40	; 64
     d30:	87 b9       	out	0x07, r24	; 7
     d32:	87 b1       	in	r24, 0x07	; 7
     d34:	8f 77       	andi	r24, 0x7F	; 127
     d36:	87 b9       	out	0x07, r24	; 7
     d38:	86 b1       	in	r24, 0x06	; 6
     d3a:	88 7f       	andi	r24, 0xF8	; 248
     d3c:	86 b9       	out	0x06, r24	; 6
     d3e:	68 30       	cpi	r22, 0x08	; 8
     d40:	58 f4       	brcc	.+22     	; 0xd58 <ADC_Init_N+0x56>
     d42:	67 70       	andi	r22, 0x07	; 7
     d44:	86 b1       	in	r24, 0x06	; 6
     d46:	68 2b       	or	r22, r24
     d48:	66 b9       	out	0x06, r22	; 6
     d4a:	86 b1       	in	r24, 0x06	; 6
     d4c:	80 68       	ori	r24, 0x80	; 128
     d4e:	86 b9       	out	0x06, r24	; 6
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	08 95       	ret
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	08 95       	ret
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	08 95       	ret

00000d5c <ADC_ReadChannel>:
     d5c:	78 94       	sei
     d5e:	97 b1       	in	r25, 0x07	; 7
     d60:	90 7e       	andi	r25, 0xE0	; 224
     d62:	97 b9       	out	0x07, r25	; 7
     d64:	88 30       	cpi	r24, 0x08	; 8
     d66:	70 f4       	brcc	.+28     	; 0xd84 <ADC_ReadChannel+0x28>
     d68:	97 b1       	in	r25, 0x07	; 7
     d6a:	90 7e       	andi	r25, 0xE0	; 224
     d6c:	97 b9       	out	0x07, r25	; 7
     d6e:	97 b1       	in	r25, 0x07	; 7
     d70:	89 2b       	or	r24, r25
     d72:	87 b9       	out	0x07, r24	; 7
     d74:	86 b1       	in	r24, 0x06	; 6
     d76:	80 64       	ori	r24, 0x40	; 64
     d78:	86 b9       	out	0x06, r24	; 6
     d7a:	86 b1       	in	r24, 0x06	; 6
     d7c:	88 60       	ori	r24, 0x08	; 8
     d7e:	86 b9       	out	0x06, r24	; 6
     d80:	85 e0       	ldi	r24, 0x05	; 5
     d82:	08 95       	ret
     d84:	89 e0       	ldi	r24, 0x09	; 9
     d86:	08 95       	ret

00000d88 <__vector_16>:


ISR(ADC_vect)
{
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	2f 93       	push	r18
     d94:	3f 93       	push	r19
     d96:	4f 93       	push	r20
     d98:	5f 93       	push	r21
     d9a:	6f 93       	push	r22
     d9c:	7f 93       	push	r23
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
     da2:	af 93       	push	r26
     da4:	bf 93       	push	r27

	Adc_Data = ((u16)ADC * 100) / 1023;
     da6:	24 b1       	in	r18, 0x04	; 4
     da8:	35 b1       	in	r19, 0x05	; 5
     daa:	44 e6       	ldi	r20, 0x64	; 100
     dac:	42 9f       	mul	r20, r18
     dae:	c0 01       	movw	r24, r0
     db0:	43 9f       	mul	r20, r19
     db2:	90 0d       	add	r25, r0
     db4:	11 24       	eor	r1, r1
     db6:	6f ef       	ldi	r22, 0xFF	; 255
     db8:	73 e0       	ldi	r23, 0x03	; 3
     dba:	0e 94 8e 09 	call	0x131c	; 0x131c <__udivmodhi4>
     dbe:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <Adc_Data+0x1>
     dc2:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <Adc_Data>
}
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <DIO_SetPinDirection>:
     de4:	44 23       	and	r20, r20
     de6:	d9 f1       	breq	.+118    	; 0xe5e <DIO_SetPinDirection+0x7a>
     de8:	41 30       	cpi	r20, 0x01	; 1
     dea:	09 f0       	breq	.+2      	; 0xdee <DIO_SetPinDirection+0xa>
     dec:	74 c0       	rjmp	.+232    	; 0xed6 <DIO_SetPinDirection+0xf2>
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 f0       	breq	.+36     	; 0xe16 <DIO_SetPinDirection+0x32>
     df2:	28 f0       	brcs	.+10     	; 0xdfe <DIO_SetPinDirection+0x1a>
     df4:	82 30       	cpi	r24, 0x02	; 2
     df6:	d9 f0       	breq	.+54     	; 0xe2e <DIO_SetPinDirection+0x4a>
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	29 f1       	breq	.+74     	; 0xe46 <DIO_SetPinDirection+0x62>
     dfc:	6e c0       	rjmp	.+220    	; 0xeda <DIO_SetPinDirection+0xf6>
     dfe:	2a b3       	in	r18, 0x1a	; 26
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_SetPinDirection+0x26>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	6a 95       	dec	r22
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_SetPinDirection+0x22>
     e0e:	82 2b       	or	r24, r18
     e10:	8a bb       	out	0x1a, r24	; 26
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	08 95       	ret
     e16:	27 b3       	in	r18, 0x17	; 23
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_SetPinDirection+0x3e>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	6a 95       	dec	r22
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_SetPinDirection+0x3a>
     e26:	82 2b       	or	r24, r18
     e28:	87 bb       	out	0x17, r24	; 23
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	08 95       	ret
     e2e:	24 b3       	in	r18, 0x14	; 20
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_SetPinDirection+0x56>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	6a 95       	dec	r22
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_SetPinDirection+0x52>
     e3e:	82 2b       	or	r24, r18
     e40:	84 bb       	out	0x14, r24	; 20
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 95       	ret
     e46:	21 b3       	in	r18, 0x11	; 17
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_SetPinDirection+0x6e>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	6a 95       	dec	r22
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_SetPinDirection+0x6a>
     e56:	82 2b       	or	r24, r18
     e58:	81 bb       	out	0x11, r24	; 17
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	08 95       	ret
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	99 f0       	breq	.+38     	; 0xe88 <DIO_SetPinDirection+0xa4>
     e62:	28 f0       	brcs	.+10     	; 0xe6e <DIO_SetPinDirection+0x8a>
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	e9 f0       	breq	.+58     	; 0xea2 <DIO_SetPinDirection+0xbe>
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	41 f1       	breq	.+80     	; 0xebc <DIO_SetPinDirection+0xd8>
     e6c:	38 c0       	rjmp	.+112    	; 0xede <DIO_SetPinDirection+0xfa>
     e6e:	2a b3       	in	r18, 0x1a	; 26
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_SetPinDirection+0x96>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	6a 95       	dec	r22
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_SetPinDirection+0x92>
     e7e:	80 95       	com	r24
     e80:	82 23       	and	r24, r18
     e82:	8a bb       	out	0x1a, r24	; 26
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	08 95       	ret
     e88:	27 b3       	in	r18, 0x17	; 23
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_SetPinDirection+0xb0>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	6a 95       	dec	r22
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_SetPinDirection+0xac>
     e98:	80 95       	com	r24
     e9a:	82 23       	and	r24, r18
     e9c:	87 bb       	out	0x17, r24	; 23
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	08 95       	ret
     ea2:	24 b3       	in	r18, 0x14	; 20
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_SetPinDirection+0xca>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	6a 95       	dec	r22
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_SetPinDirection+0xc6>
     eb2:	80 95       	com	r24
     eb4:	82 23       	and	r24, r18
     eb6:	84 bb       	out	0x14, r24	; 20
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	08 95       	ret
     ebc:	21 b3       	in	r18, 0x11	; 17
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_SetPinDirection+0xe4>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	6a 95       	dec	r22
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_SetPinDirection+0xe0>
     ecc:	80 95       	com	r24
     ece:	82 23       	and	r24, r18
     ed0:	81 bb       	out	0x11, r24	; 17
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	08 95       	ret
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	08 95       	ret
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	08 95       	ret
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	08 95       	ret

00000ee2 <DIO_SetPinValue>:
     ee2:	85 30       	cpi	r24, 0x05	; 5
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <DIO_SetPinValue+0x6>
     ee6:	7f c0       	rjmp	.+254    	; 0xfe6 <DIO_SetPinValue+0x104>
     ee8:	69 30       	cpi	r22, 0x09	; 9
     eea:	08 f0       	brcs	.+2      	; 0xeee <DIO_SetPinValue+0xc>
     eec:	7e c0       	rjmp	.+252    	; 0xfea <DIO_SetPinValue+0x108>
     eee:	43 30       	cpi	r20, 0x03	; 3
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <DIO_SetPinValue+0x12>
     ef2:	7d c0       	rjmp	.+250    	; 0xfee <DIO_SetPinValue+0x10c>
     ef4:	44 23       	and	r20, r20
     ef6:	d9 f1       	breq	.+118    	; 0xf6e <DIO_SetPinValue+0x8c>
     ef8:	41 30       	cpi	r20, 0x01	; 1
     efa:	09 f0       	breq	.+2      	; 0xefe <DIO_SetPinValue+0x1c>
     efc:	7a c0       	rjmp	.+244    	; 0xff2 <DIO_SetPinValue+0x110>
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	91 f0       	breq	.+36     	; 0xf26 <DIO_SetPinValue+0x44>
     f02:	28 f0       	brcs	.+10     	; 0xf0e <DIO_SetPinValue+0x2c>
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	d9 f0       	breq	.+54     	; 0xf3e <DIO_SetPinValue+0x5c>
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	29 f1       	breq	.+74     	; 0xf56 <DIO_SetPinValue+0x74>
     f0c:	74 c0       	rjmp	.+232    	; 0xff6 <DIO_SetPinValue+0x114>
     f0e:	2b b3       	in	r18, 0x1b	; 27
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_SetPinValue+0x38>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	6a 95       	dec	r22
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_SetPinValue+0x34>
     f1e:	82 2b       	or	r24, r18
     f20:	8b bb       	out	0x1b, r24	; 27
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret
     f26:	28 b3       	in	r18, 0x18	; 24
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_SetPinValue+0x50>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	6a 95       	dec	r22
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_SetPinValue+0x4c>
     f36:	82 2b       	or	r24, r18
     f38:	88 bb       	out	0x18, r24	; 24
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	08 95       	ret
     f3e:	25 b3       	in	r18, 0x15	; 21
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_SetPinValue+0x68>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	6a 95       	dec	r22
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_SetPinValue+0x64>
     f4e:	82 2b       	or	r24, r18
     f50:	85 bb       	out	0x15, r24	; 21
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	08 95       	ret
     f56:	22 b3       	in	r18, 0x12	; 18
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_SetPinValue+0x80>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	6a 95       	dec	r22
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_SetPinValue+0x7c>
     f66:	82 2b       	or	r24, r18
     f68:	82 bb       	out	0x12, r24	; 18
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	08 95       	ret
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	99 f0       	breq	.+38     	; 0xf98 <DIO_SetPinValue+0xb6>
     f72:	28 f0       	brcs	.+10     	; 0xf7e <DIO_SetPinValue+0x9c>
     f74:	82 30       	cpi	r24, 0x02	; 2
     f76:	e9 f0       	breq	.+58     	; 0xfb2 <DIO_SetPinValue+0xd0>
     f78:	83 30       	cpi	r24, 0x03	; 3
     f7a:	41 f1       	breq	.+80     	; 0xfcc <DIO_SetPinValue+0xea>
     f7c:	3e c0       	rjmp	.+124    	; 0xffa <DIO_SetPinValue+0x118>
     f7e:	2b b3       	in	r18, 0x1b	; 27
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_SetPinValue+0xa8>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	6a 95       	dec	r22
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_SetPinValue+0xa4>
     f8e:	80 95       	com	r24
     f90:	82 23       	and	r24, r18
     f92:	8b bb       	out	0x1b, r24	; 27
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	08 95       	ret
     f98:	28 b3       	in	r18, 0x18	; 24
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_SetPinValue+0xc2>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	6a 95       	dec	r22
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_SetPinValue+0xbe>
     fa8:	80 95       	com	r24
     faa:	82 23       	and	r24, r18
     fac:	88 bb       	out	0x18, r24	; 24
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	08 95       	ret
     fb2:	25 b3       	in	r18, 0x15	; 21
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_SetPinValue+0xdc>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	6a 95       	dec	r22
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_SetPinValue+0xd8>
     fc2:	80 95       	com	r24
     fc4:	82 23       	and	r24, r18
     fc6:	85 bb       	out	0x15, r24	; 21
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	08 95       	ret
     fcc:	22 b3       	in	r18, 0x12	; 18
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_SetPinValue+0xf6>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	6a 95       	dec	r22
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_SetPinValue+0xf2>
     fdc:	80 95       	com	r24
     fde:	82 23       	and	r24, r18
     fe0:	82 bb       	out	0x12, r24	; 18
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	08 95       	ret
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	08 95       	ret
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	08 95       	ret
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	08 95       	ret
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	08 95       	ret
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	08 95       	ret
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	08 95       	ret

00000ffe <DIO_GetPinValue>:
     ffe:	85 30       	cpi	r24, 0x05	; 5
    1000:	08 f0       	brcs	.+2      	; 0x1004 <DIO_GetPinValue+0x6>
    1002:	5b c0       	rjmp	.+182    	; 0x10ba <DIO_GetPinValue+0xbc>
    1004:	69 30       	cpi	r22, 0x09	; 9
    1006:	08 f0       	brcs	.+2      	; 0x100a <DIO_GetPinValue+0xc>
    1008:	5a c0       	rjmp	.+180    	; 0x10be <DIO_GetPinValue+0xc0>
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	d1 f0       	breq	.+52     	; 0x1042 <DIO_GetPinValue+0x44>
    100e:	28 f0       	brcs	.+10     	; 0x101a <DIO_GetPinValue+0x1c>
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	59 f1       	breq	.+86     	; 0x106a <DIO_GetPinValue+0x6c>
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	e9 f1       	breq	.+122    	; 0x1092 <DIO_GetPinValue+0x94>
    1018:	54 c0       	rjmp	.+168    	; 0x10c2 <DIO_GetPinValue+0xc4>
    101a:	89 b3       	in	r24, 0x19	; 25
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	06 2e       	mov	r0, r22
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_GetPinValue+0x28>
    1022:	95 95       	asr	r25
    1024:	87 95       	ror	r24
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_GetPinValue+0x24>
    102a:	81 70       	andi	r24, 0x01	; 1
    102c:	fa 01       	movw	r30, r20
    102e:	80 83       	st	Z, r24
    1030:	89 b3       	in	r24, 0x19	; 25
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_GetPinValue+0x3c>
    1036:	95 95       	asr	r25
    1038:	87 95       	ror	r24
    103a:	6a 95       	dec	r22
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_GetPinValue+0x38>
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	08 95       	ret
    1042:	86 b3       	in	r24, 0x16	; 22
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	06 2e       	mov	r0, r22
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_GetPinValue+0x50>
    104a:	95 95       	asr	r25
    104c:	87 95       	ror	r24
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_GetPinValue+0x4c>
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	fa 01       	movw	r30, r20
    1056:	80 83       	st	Z, r24
    1058:	86 b3       	in	r24, 0x16	; 22
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_GetPinValue+0x64>
    105e:	95 95       	asr	r25
    1060:	87 95       	ror	r24
    1062:	6a 95       	dec	r22
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_GetPinValue+0x60>
    1066:	81 70       	andi	r24, 0x01	; 1
    1068:	08 95       	ret
    106a:	83 b3       	in	r24, 0x13	; 19
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	06 2e       	mov	r0, r22
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_GetPinValue+0x78>
    1072:	95 95       	asr	r25
    1074:	87 95       	ror	r24
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_GetPinValue+0x74>
    107a:	81 70       	andi	r24, 0x01	; 1
    107c:	fa 01       	movw	r30, r20
    107e:	80 83       	st	Z, r24
    1080:	83 b3       	in	r24, 0x13	; 19
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_GetPinValue+0x8c>
    1086:	95 95       	asr	r25
    1088:	87 95       	ror	r24
    108a:	6a 95       	dec	r22
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_GetPinValue+0x88>
    108e:	81 70       	andi	r24, 0x01	; 1
    1090:	08 95       	ret
    1092:	80 b3       	in	r24, 0x10	; 16
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	06 2e       	mov	r0, r22
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_GetPinValue+0xa0>
    109a:	95 95       	asr	r25
    109c:	87 95       	ror	r24
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_GetPinValue+0x9c>
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	fa 01       	movw	r30, r20
    10a6:	80 83       	st	Z, r24
    10a8:	83 b3       	in	r24, 0x13	; 19
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_GetPinValue+0xb4>
    10ae:	95 95       	asr	r25
    10b0:	87 95       	ror	r24
    10b2:	6a 95       	dec	r22
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_GetPinValue+0xb0>
    10b6:	81 70       	andi	r24, 0x01	; 1
    10b8:	08 95       	ret
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	08 95       	ret
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	08 95       	ret
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	08 95       	ret

000010c6 <DIO_SetPullUp>:
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	20 f4       	brcc	.+8      	; 0x10d2 <DIO_SetPullUp+0xc>
    10ca:	69 30       	cpi	r22, 0x09	; 9
    10cc:	20 f0       	brcs	.+8      	; 0x10d6 <DIO_SetPullUp+0x10>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	08 95       	ret
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	08 95       	ret

000010da <TIMER2_Init>:
		return SUCCESSFUL;
	}
	else
	return UNSUCCESSFUL;
	
}
    10da:	fc 01       	movw	r30, r24
    10dc:	95 b5       	in	r25, 0x25	; 37
    10de:	9f 77       	andi	r25, 0x7F	; 127
    10e0:	95 bd       	out	0x25, r25	; 37
    10e2:	20 81       	ld	r18, Z
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	28 f0       	brcs	.+10     	; 0x10f2 <TIMER2_Init+0x18>
    10e8:	29 30       	cpi	r18, 0x09	; 9
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <TIMER2_Init+0x18>
    10ec:	28 30       	cpi	r18, 0x08	; 8
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <TIMER2_Init+0x18>
    10f0:	53 c0       	rjmp	.+166    	; 0x1198 <TIMER2_Init+0xbe>
    10f2:	85 b5       	in	r24, 0x25	; 37
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	87 7b       	andi	r24, 0xB7	; 183
    1104:	28 2b       	or	r18, r24
    1106:	25 bd       	out	0x25, r18	; 37
    1108:	81 81       	ldd	r24, Z+1	; 0x01
    110a:	88 30       	cpi	r24, 0x08	; 8
    110c:	08 f0       	brcs	.+2      	; 0x1110 <TIMER2_Init+0x36>
    110e:	40 c0       	rjmp	.+128    	; 0x1190 <TIMER2_Init+0xb6>
    1110:	95 b5       	in	r25, 0x25	; 37
    1112:	98 7f       	andi	r25, 0xF8	; 248
    1114:	89 2b       	or	r24, r25
    1116:	85 bd       	out	0x25, r24	; 37
    1118:	80 81       	ld	r24, Z
    111a:	81 11       	cpse	r24, r1
    111c:	06 c0       	rjmp	.+12     	; 0x112a <TIMER2_Init+0x50>
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	84 bd       	out	0x24, r24	; 36
    1122:	89 b7       	in	r24, 0x39	; 57
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	89 bf       	out	0x39, r24	; 57
    1128:	39 c0       	rjmp	.+114    	; 0x119c <TIMER2_Init+0xc2>
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	b9 f4       	brne	.+46     	; 0x115c <TIMER2_Init+0x82>
    112e:	84 81       	ldd	r24, Z+4	; 0x04
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	80 f4       	brcc	.+32     	; 0x1154 <TIMER2_Init+0x7a>
    1134:	25 b5       	in	r18, 0x25	; 37
    1136:	30 e1       	ldi	r19, 0x10	; 16
    1138:	83 9f       	mul	r24, r19
    113a:	c0 01       	movw	r24, r0
    113c:	11 24       	eor	r1, r1
    113e:	92 2f       	mov	r25, r18
    1140:	9f 7c       	andi	r25, 0xCF	; 207
    1142:	89 2b       	or	r24, r25
    1144:	85 bd       	out	0x25, r24	; 37
    1146:	14 bc       	out	0x24, r1	; 36
    1148:	83 81       	ldd	r24, Z+3	; 0x03
    114a:	83 bd       	out	0x23, r24	; 35
    114c:	89 b7       	in	r24, 0x39	; 57
    114e:	80 68       	ori	r24, 0x80	; 128
    1150:	89 bf       	out	0x39, r24	; 57
    1152:	24 c0       	rjmp	.+72     	; 0x119c <TIMER2_Init+0xc2>
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Error_Init2>
    115a:	20 c0       	rjmp	.+64     	; 0x119c <TIMER2_Init+0xc2>
    115c:	89 30       	cpi	r24, 0x09	; 9
    115e:	f1 f4       	brne	.+60     	; 0x119c <TIMER2_Init+0xc2>
    1160:	85 81       	ldd	r24, Z+5	; 0x05
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	88 f4       	brcc	.+34     	; 0x1188 <TIMER2_Init+0xae>
    1166:	25 b5       	in	r18, 0x25	; 37
    1168:	30 e1       	ldi	r19, 0x10	; 16
    116a:	83 9f       	mul	r24, r19
    116c:	c0 01       	movw	r24, r0
    116e:	11 24       	eor	r1, r1
    1170:	92 2f       	mov	r25, r18
    1172:	9f 7c       	andi	r25, 0xCF	; 207
    1174:	89 2b       	or	r24, r25
    1176:	85 bd       	out	0x25, r24	; 37
    1178:	14 bc       	out	0x24, r1	; 36
    117a:	13 bc       	out	0x23, r1	; 35
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	84 bd       	out	0x24, r24	; 36
    1180:	89 b7       	in	r24, 0x39	; 57
    1182:	80 64       	ori	r24, 0x40	; 64
    1184:	89 bf       	out	0x39, r24	; 57
    1186:	0a c0       	rjmp	.+20     	; 0x119c <TIMER2_Init+0xc2>
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Error_Init2>
    118e:	06 c0       	rjmp	.+12     	; 0x119c <TIMER2_Init+0xc2>
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <Error_Init2>
    1196:	02 c0       	rjmp	.+4      	; 0x119c <TIMER2_Init+0xc2>
    1198:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <Error_Init2>
    119c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <Error_Init2>
    11a0:	81 11       	cpse	r24, r1
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	08 95       	ret

000011a6 <TIMER0_Init>:
    11a6:	fc 01       	movw	r30, r24
    11a8:	80 81       	ld	r24, Z
    11aa:	87 30       	cpi	r24, 0x07	; 7
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <TIMER0_Init+0xa>
    11ae:	5c c0       	rjmp	.+184    	; 0x1268 <TIMER0_Init+0xc2>
    11b0:	81 81       	ldd	r24, Z+1	; 0x01
    11b2:	85 30       	cpi	r24, 0x05	; 5
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <TIMER0_Init+0x12>
    11b6:	5a c0       	rjmp	.+180    	; 0x126c <TIMER0_Init+0xc6>
    11b8:	92 81       	ldd	r25, Z+2	; 0x02
    11ba:	94 30       	cpi	r25, 0x04	; 4
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <TIMER0_Init+0x1a>
    11be:	58 c0       	rjmp	.+176    	; 0x1270 <TIMER0_Init+0xca>
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	95 30       	cpi	r25, 0x05	; 5
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <TIMER0_Init+0x22>
    11c6:	56 c0       	rjmp	.+172    	; 0x1274 <TIMER0_Init+0xce>
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	39 f1       	breq	.+78     	; 0x121a <TIMER0_Init+0x74>
    11cc:	80 f0       	brcs	.+32     	; 0x11ee <TIMER0_Init+0x48>
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <TIMER0_Init+0x32>
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	b9 f0       	breq	.+46     	; 0x1204 <TIMER0_Init+0x5e>
    11d6:	2c c0       	rjmp	.+88     	; 0x1230 <TIMER0_Init+0x8a>
    11d8:	83 b7       	in	r24, 0x33	; 51
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	83 bf       	out	0x33, r24	; 51
    11de:	83 b7       	in	r24, 0x33	; 51
    11e0:	8f 7b       	andi	r24, 0xBF	; 191
    11e2:	83 bf       	out	0x33, r24	; 51
    11e4:	83 b7       	in	r24, 0x33	; 51
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	83 bf       	out	0x33, r24	; 51
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	22 c0       	rjmp	.+68     	; 0x1232 <TIMER0_Init+0x8c>
    11ee:	83 b7       	in	r24, 0x33	; 51
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	83 bf       	out	0x33, r24	; 51
    11f4:	83 b7       	in	r24, 0x33	; 51
    11f6:	87 7f       	andi	r24, 0xF7	; 247
    11f8:	83 bf       	out	0x33, r24	; 51
    11fa:	83 b7       	in	r24, 0x33	; 51
    11fc:	80 68       	ori	r24, 0x80	; 128
    11fe:	83 bf       	out	0x33, r24	; 51
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	17 c0       	rjmp	.+46     	; 0x1232 <TIMER0_Init+0x8c>
    1204:	83 b7       	in	r24, 0x33	; 51
    1206:	88 60       	ori	r24, 0x08	; 8
    1208:	83 bf       	out	0x33, r24	; 51
    120a:	83 b7       	in	r24, 0x33	; 51
    120c:	80 64       	ori	r24, 0x40	; 64
    120e:	83 bf       	out	0x33, r24	; 51
    1210:	83 b7       	in	r24, 0x33	; 51
    1212:	8f 77       	andi	r24, 0x7F	; 127
    1214:	83 bf       	out	0x33, r24	; 51
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0c c0       	rjmp	.+24     	; 0x1232 <TIMER0_Init+0x8c>
    121a:	83 b7       	in	r24, 0x33	; 51
    121c:	87 7f       	andi	r24, 0xF7	; 247
    121e:	83 bf       	out	0x33, r24	; 51
    1220:	83 b7       	in	r24, 0x33	; 51
    1222:	80 64       	ori	r24, 0x40	; 64
    1224:	83 bf       	out	0x33, r24	; 51
    1226:	83 b7       	in	r24, 0x33	; 51
    1228:	8f 77       	andi	r24, 0x7F	; 127
    122a:	83 bf       	out	0x33, r24	; 51
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <TIMER0_Init+0x8c>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	95 81       	ldd	r25, Z+5	; 0x05
    1234:	9c bf       	out	0x3c, r25	; 60
    1236:	23 b7       	in	r18, 0x33	; 51
    1238:	90 81       	ld	r25, Z
    123a:	92 2b       	or	r25, r18
    123c:	93 bf       	out	0x33, r25	; 51
    123e:	43 b7       	in	r20, 0x33	; 51
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	50 e1       	ldi	r21, 0x10	; 16
    1244:	95 9f       	mul	r25, r21
    1246:	90 01       	movw	r18, r0
    1248:	11 24       	eor	r1, r1
    124a:	24 2b       	or	r18, r20
    124c:	23 bf       	out	0x33, r18	; 51
    124e:	92 81       	ldd	r25, Z+2	; 0x02
    1250:	99 23       	and	r25, r25
    1252:	29 f0       	breq	.+10     	; 0x125e <TIMER0_Init+0xb8>
    1254:	78 94       	sei
    1256:	29 b7       	in	r18, 0x39	; 57
    1258:	92 81       	ldd	r25, Z+2	; 0x02
    125a:	92 2b       	or	r25, r18
    125c:	99 bf       	out	0x39, r25	; 57
    125e:	22 b7       	in	r18, 0x32	; 50
    1260:	94 81       	ldd	r25, Z+4	; 0x04
    1262:	92 2b       	or	r25, r18
    1264:	92 bf       	out	0x32, r25	; 50
    1266:	08 95       	ret
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	08 95       	ret
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	08 95       	ret
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	08 95       	ret
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	08 95       	ret

00001278 <TIMER0_set_compare>:
    1278:	8c bf       	out	0x3c, r24	; 60
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	08 95       	ret

0000127e <__vector_11>:
    127e:	1f 92       	push	r1
    1280:	0f 92       	push	r0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	0f 92       	push	r0
    1286:	11 24       	eor	r1, r1
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <OVF_Counter>
    1290:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <OVF_Counter+0x1>
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <OVF_Counter+0x1>
    129a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <OVF_Counter>
    129e:	4f 97       	sbiw	r24, 0x1f	; 31
    12a0:	41 f4       	brne	.+16     	; 0x12b2 <__vector_11+0x34>
    12a2:	9b b3       	in	r25, 0x1b	; 27
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	89 27       	eor	r24, r25
    12a8:	8b bb       	out	0x1b, r24	; 27
    12aa:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <OVF_Counter+0x1>
    12ae:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <OVF_Counter>
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	0f 90       	pop	r0
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	0f 90       	pop	r0
    12bc:	1f 90       	pop	r1
    12be:	18 95       	reti

000012c0 <TIMER2_setCallBack>:



void TIMER2_setCallBack(void (*a_ptr)(void)){
	
	g_timer2CallBackPtr=a_ptr;
    12c0:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <g_timer2CallBackPtr+0x1>
    12c4:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <g_timer2CallBackPtr>
    12c8:	08 95       	ret

000012ca <__vector_5>:
}

ISR(TIMER2_OVF_vect){
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
	if(g_timer2CallBackPtr != NULL_PTR){
    12ec:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <g_timer2CallBackPtr>
    12f0:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <g_timer2CallBackPtr+0x1>
    12f4:	30 97       	sbiw	r30, 0x00	; 0
    12f6:	09 f0       	breq	.+2      	; 0x12fa <__vector_5+0x30>
		(*g_timer2CallBackPtr)();
    12f8:	09 95       	icall
	}
}
    12fa:	ff 91       	pop	r31
    12fc:	ef 91       	pop	r30
    12fe:	bf 91       	pop	r27
    1300:	af 91       	pop	r26
    1302:	9f 91       	pop	r25
    1304:	8f 91       	pop	r24
    1306:	7f 91       	pop	r23
    1308:	6f 91       	pop	r22
    130a:	5f 91       	pop	r21
    130c:	4f 91       	pop	r20
    130e:	3f 91       	pop	r19
    1310:	2f 91       	pop	r18
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <__udivmodhi4>:
    131c:	aa 1b       	sub	r26, r26
    131e:	bb 1b       	sub	r27, r27
    1320:	51 e1       	ldi	r21, 0x11	; 17
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <__udivmodhi4_ep>

00001324 <__udivmodhi4_loop>:
    1324:	aa 1f       	adc	r26, r26
    1326:	bb 1f       	adc	r27, r27
    1328:	a6 17       	cp	r26, r22
    132a:	b7 07       	cpc	r27, r23
    132c:	10 f0       	brcs	.+4      	; 0x1332 <__udivmodhi4_ep>
    132e:	a6 1b       	sub	r26, r22
    1330:	b7 0b       	sbc	r27, r23

00001332 <__udivmodhi4_ep>:
    1332:	88 1f       	adc	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	5a 95       	dec	r21
    1338:	a9 f7       	brne	.-22     	; 0x1324 <__udivmodhi4_loop>
    133a:	80 95       	com	r24
    133c:	90 95       	com	r25
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	08 95       	ret

00001344 <__udivmodsi4>:
    1344:	a1 e2       	ldi	r26, 0x21	; 33
    1346:	1a 2e       	mov	r1, r26
    1348:	aa 1b       	sub	r26, r26
    134a:	bb 1b       	sub	r27, r27
    134c:	fd 01       	movw	r30, r26
    134e:	0d c0       	rjmp	.+26     	; 0x136a <__udivmodsi4_ep>

00001350 <__udivmodsi4_loop>:
    1350:	aa 1f       	adc	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	ee 1f       	adc	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	a2 17       	cp	r26, r18
    135a:	b3 07       	cpc	r27, r19
    135c:	e4 07       	cpc	r30, r20
    135e:	f5 07       	cpc	r31, r21
    1360:	20 f0       	brcs	.+8      	; 0x136a <__udivmodsi4_ep>
    1362:	a2 1b       	sub	r26, r18
    1364:	b3 0b       	sbc	r27, r19
    1366:	e4 0b       	sbc	r30, r20
    1368:	f5 0b       	sbc	r31, r21

0000136a <__udivmodsi4_ep>:
    136a:	66 1f       	adc	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	88 1f       	adc	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	1a 94       	dec	r1
    1374:	69 f7       	brne	.-38     	; 0x1350 <__udivmodsi4_loop>
    1376:	60 95       	com	r22
    1378:	70 95       	com	r23
    137a:	80 95       	com	r24
    137c:	90 95       	com	r25
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	bd 01       	movw	r22, r26
    1384:	cf 01       	movw	r24, r30
    1386:	08 95       	ret

00001388 <atoi>:
    1388:	fc 01       	movw	r30, r24
    138a:	88 27       	eor	r24, r24
    138c:	99 27       	eor	r25, r25
    138e:	e8 94       	clt
    1390:	21 91       	ld	r18, Z+
    1392:	20 32       	cpi	r18, 0x20	; 32
    1394:	e9 f3       	breq	.-6      	; 0x1390 <atoi+0x8>
    1396:	29 30       	cpi	r18, 0x09	; 9
    1398:	10 f0       	brcs	.+4      	; 0x139e <atoi+0x16>
    139a:	2e 30       	cpi	r18, 0x0E	; 14
    139c:	c8 f3       	brcs	.-14     	; 0x1390 <atoi+0x8>
    139e:	2b 32       	cpi	r18, 0x2B	; 43
    13a0:	41 f0       	breq	.+16     	; 0x13b2 <atoi+0x2a>
    13a2:	2d 32       	cpi	r18, 0x2D	; 45
    13a4:	39 f4       	brne	.+14     	; 0x13b4 <atoi+0x2c>
    13a6:	68 94       	set
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <atoi+0x2a>
    13aa:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__mulhi_const_10>
    13ae:	82 0f       	add	r24, r18
    13b0:	91 1d       	adc	r25, r1
    13b2:	21 91       	ld	r18, Z+
    13b4:	20 53       	subi	r18, 0x30	; 48
    13b6:	2a 30       	cpi	r18, 0x0A	; 10
    13b8:	c0 f3       	brcs	.-16     	; 0x13aa <atoi+0x22>
    13ba:	1e f4       	brtc	.+6      	; 0x13c2 <atoi+0x3a>
    13bc:	90 95       	com	r25
    13be:	81 95       	neg	r24
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	08 95       	ret

000013c4 <__mulhi_const_10>:
    13c4:	7a e0       	ldi	r23, 0x0A	; 10
    13c6:	97 9f       	mul	r25, r23
    13c8:	90 2d       	mov	r25, r0
    13ca:	87 9f       	mul	r24, r23
    13cc:	80 2d       	mov	r24, r0
    13ce:	91 0d       	add	r25, r1
    13d0:	11 24       	eor	r1, r1
    13d2:	08 95       	ret

000013d4 <_exit>:
    13d4:	f8 94       	cli

000013d6 <__stop_program>:
    13d6:	ff cf       	rjmp	.-2      	; 0x13d6 <__stop_program>
